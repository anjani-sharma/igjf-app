PROJECT STRUCTURE:

├── .expo
│   ├── README.md
│   └── settings.json
├── .gitignore
├── backend
│   ├── .env
│   ├── config
│   │   └── database.js
│   ├── controllers
│   │   ├── attendanceController.js
│   │   ├── authController.js
│   │   ├── eventController.js
│   │   └── memberController.js
│   ├── database.sqlite
│   ├── debug-events.js
│   ├── debug-server.js
│   ├── middleware
│   │   └── auth.js
│   ├── models
│   │   ├── Attendance.js
│   │   ├── Event.js
│   │   ├── User.js
│   │   └── index.js
│   ├── package-lock.json
│   ├── package.json
│   ├── routes
│   │   ├── auth.js
│   │   ├── events.js
│   │   └── members.js
│   ├── scripts
│   ├── server.js
│   ├── services
│   │   └── emailService.js
│   └── uploads
│       ├── 1758129565426.jpg
│       └── 1758131445094.jpg
├── combine.py
├── mobile-app
│   ├── .expo
│   │   ├── README.md
│   │   ├── devices.json
│   │   └── types
│   ├── .vscode
│   │   └── settings.json
│   ├── app
│   │   ├── _layout.tsx
│   │   ├── admin.tsx
│   │   ├── attendance-scanner.tsx
│   │   ├── create-event.tsx
│   │   ├── dashboard.tsx
│   │   ├── event-detail.tsx
│   │   ├── events.tsx
│   │   ├── images
│   │   │   └── flag.jpeg
│   │   ├── index.tsx
│   │   ├── location-attendance.tsx
│   │   ├── login.tsx
│   │   ├── members.tsx
│   │   ├── profile-edit.tsx
│   │   ├── register.tsx
│   │   ├── roles.tsx
│   │   └── scanner.tsx
│   ├── app.json
│   ├── assets
│   │   └── fonts
│   ├── components
│   │   ├── Collapsible.tsx
│   │   ├── ExternalLink.tsx
│   │   ├── HapticTab.tsx
│   │   ├── HelloWave.tsx
│   │   ├── ParallaxScrollView.tsx
│   │   ├── TabBarBackground.tsx
│   │   ├── ThemedText.tsx
│   │   ├── ThemedView.tsx
│   │   └── ui
│   │       ├── IconSymbol.tsx
│   │       └── TabBarBackground.ios.tsx
│   ├── constants
│   │   ├── Colors.ts
│   │   └── Theme.ts
│   ├── contexts
│   │   └── AuthContext.tsx
│   ├── eslint.config.js
│   ├── hooks
│   │   ├── useColorScheme.ts
│   │   ├── useColorScheme.web.ts
│   │   └── useThemeColor.ts
│   ├── package-lock.json
│   ├── package.json
│   ├── scripts
│   ├── services
│   │   └── apiService.js
│   ├── src
│   │   ├── components
│   │   ├── context
│   │   │   └── AuthContext.js
│   │   ├── screens
│   │   │   ├── LoginScreen.js
│   │   │   ├── RegisterScreen.js
│   │   │   └── WelcomeScreen.js
│   │   └── services
│   │       └── api.js
│   ├── tsconfig.json
│   └── utils
│       └── apiUtils.ts
├── project_code.txt
└── project_code1.txt


================ CODE =================


# ==== ./combine.py ====

import os

# File extensions to include
extensions = (".py", ".js", ".ts", ".tsx", ".html", ".css", ".json")

# Files to explicitly skip (lockfiles, large auto-generated files, old exports, etc.)
skip_files = {
    "package-lock.json",
    "yarn.lock",
    "pnpm-lock.yaml",
    "poetry.lock",
    "Pipfile.lock",
    "igjf/app/project_code1.txt",  # old code base
    "igjf/app/project_code2.txt",  # old code base
    "igjf/app/rebuild_mobile_app.py"
    "igjf/app/combine.py" # current script
}

# Folders to skip
skip_dirs = {"node_modules", "__pycache__", ".git"}

output_file = "project_code.txt"

def get_tree(path, prefix=""):
    """Return a string representing the folder tree."""
    tree_str = ""
    items = sorted(os.listdir(path))
    pointers = ["├── "] * (len(items) - 1) + ["└── "]
    for pointer, name in zip(pointers, items):
        full_path = os.path.join(path, name)
        if name in skip_dirs or full_path.replace("\\", "/") in skip_files:
            continue
        tree_str += prefix + pointer + name + "\n"
        if os.path.isdir(full_path):
            extension = "│   " if pointer == "├── " else "    "
            tree_str += get_tree(full_path, prefix + extension)
    return tree_str

with open(output_file, "w", encoding="utf-8") as outfile:
    # Write project structure first
    outfile.write("PROJECT STRUCTURE:\n\n")
    outfile.write(get_tree("."))
    outfile.write("\n\n================ CODE =================\n")

    # Then write all code files
    for root, _, files in os.walk("."):
        if any(skip in root for skip in skip_dirs):
            continue
        for file in files:
            full_path = os.path.join(root, file)
            normalized_path = full_path.replace("\\", "/")
            if file in skip_files or normalized_path in skip_files:
                continue
            if file.endswith(extensions):
                try:
                    with open(full_path, "r", encoding="utf-8") as infile:
                        outfile.write(f"\n\n# ==== {normalized_path} ====\n\n")
                        outfile.write(infile.read())
                except Exception as e:
                    outfile.write(f"\n\n# ==== {normalized_path} (ERROR READING: {e}) ====\n\n")


# ==== ./mobile-app/app.json ====

{
  "expo": {
    "name": "mobile-app",
    "slug": "mobile-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "scheme": "mobileapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "sdkVersion": "54.0.0",
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true
    },
    "web": {
      "bundler": "metro",
      "output": "server"
    },
    "plugins": [
      "expo-router"
    ]
  }
}

# ==== ./mobile-app/package.json ====

{
  "name": "mobile-app",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "reset-project": "node ./scripts/reset-project.js"
  },
  "dependencies": {
    "@expo/metro-runtime": "~6.1.2",
    "@expo/vector-icons": "^15.0.2",
    "@react-native-async-storage/async-storage": "2.2.0",
    "expo": "54.0.8",
    "expo-barcode-scanner": "~14.0.0",
    "expo-camera": "~17.0.8",
    "expo-constants": "~18.0.9",
    "expo-font": "~14.0.8",
    "expo-image-picker": "~17.0.8",
    "expo-linking": "~8.0.8",
    "expo-router": "~6.0.6",
    "expo-splash-screen": "~31.0.10",
    "expo-status-bar": "~3.0.8",
    "react": "^19.1.0",
    "react-native": "0.81.4",
    "react-native-qrcode-svg": "^6.3.15",
    "react-native-safe-area-context": "~5.6.0",
    "react-native-screens": "~4.16.0",
    "react-native-svg": "15.12.1"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.1.10",
    "typescript": "~5.9.2"
  },
  "private": true
}


# ==== ./mobile-app/tsconfig.json ====

{
  "compilerOptions": {},
  "extends": "expo/tsconfig.base"
}

# ==== ./mobile-app/eslint.config.js ====

// https://docs.expo.dev/guides/using-eslint/
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
]);
// https://docs.expo.dev/guides/using-eslint/
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
]);

# ==== ./mobile-app/.expo/devices.json ====

{
  "devices": []
}

# ==== ./mobile-app/contexts/AuthContext.tsx ====

// mobile-app/contexts/AuthContext.tsx - COMPLETE FILE
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

// User interface
interface User {
  id: number;
  membershipId: string;
  fullName?: string;
  name?: string;
  email: string;
  phone?: string;
  dateOfBirth?: string;
  occupation?: string;
  address?: string;
  city?: string;
  state?: string;
  pincode?: string;
  constituency?: string;
  role: string;
  isVerified?: boolean;
  isActive?: boolean;
  profilePhoto?: string;
  qrCode?: string;
  qrCodeData?: string;
  aadharNumber?: string;
  aadharVerified?: boolean;
  aadharVerificationDate?: string;
  createdAt?: string;
  updatedAt?: string;
  registeredBy?: string;
  fatherName?: string;
  [key: string]: any;
}

interface AuthContextType {
  user: User | null;
  login: (token: string, userData: User) => Promise<void>;
  logout: () => Promise<void>;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const userData = await AsyncStorage.getItem('user');
      
      if (token && userData) {
        const parsedUser = JSON.parse(userData);
        console.log('✅ Loaded user data:', parsedUser);
        setUser(parsedUser);
      }
    } catch (error) {
      console.error('⚠️ Error loading user data:', error);
      // Clear corrupted data
      try {
        await AsyncStorage.removeItem('token');
        await AsyncStorage.removeItem('user');
      } catch (clearError) {
        console.error('Error clearing storage:', clearError);
      }
    } finally {
      setLoading(false);
    }
  };

  const login = async (token: string, userData: User) => {
    try {
      console.log('🔐 Logging in user:', userData);
      
      await AsyncStorage.setItem('token', token);
      await AsyncStorage.setItem('user', JSON.stringify(userData));
      setUser(userData);
      
      console.log('✅ User logged in and saved to storage');
    } catch (error) {
      console.error('⚠️ Error saving user data:', error);
      throw new Error('Failed to save login data');
    }
  };

  const logout = async () => {
    try {
      console.log('🚪 Logging out user');
      
      await AsyncStorage.removeItem('token');
      await AsyncStorage.removeItem('user');
      setUser(null);
      
      console.log('✅ User logged out successfully');
    } catch (error) {
      console.error('⚠️ Error removing user data:', error);
      // Still set user to null even if storage clear fails
      setUser(null);
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export type { User };

# ==== ./mobile-app/app/index.tsx ====

import React, { useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';

const partyFlag = require('./images/flag.jpeg');

export default function WelcomeScreen() {
  const { user, loading } = useAuth();

  useEffect(() => {
    if (!loading) {
      if (user) {
        // Redirect all logged-in users to the main dashboard
        router.replace('/dashboard');
      }
    }
  }, [user, loading]);

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Loading...</Text>
        </View>
        <StatusBar style="light" />
      </SafeAreaView>
    );
  }

  return (
     <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <View style={styles.logoSection}>
          <Text style={styles.partyName}>Hamro Darjeeling</Text>
          <Text style={styles.tagline}>No More Fear</Text>
        </View>
      </View>

      <View style={styles.imageContainer}>
        <Image 
          source={partyFlag} 
          style={styles.flagImage} 
          resizeMode="contain"
          onError={(error) => console.error('Image loading error:', error.nativeEvent.error)}
          defaultSource={require('./images/flag.jpeg')}
        />
      </View>
      

      <View style={styles.content}>
        <View style={styles.welcomeSection}>
          <Text style={styles.title}>Indian Gorkha Janshakti Front</Text>
          <Text style={styles.subtitle}>
            Lets us work together for a better tomorrow.
          </Text>
        </View>

        <View style={styles.buttonSection}>
          <TouchableOpacity
            style={styles.loginButton}
            onPress={() => router.push('/login')}
          >
            <Text style={styles.loginButtonText}>Member Login</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.registerButton}
            onPress={() => router.push('/register')}
          >
            <Text style={styles.registerButtonText}>
              Register as New Member
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1B2951',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    color: 'white',
    fontSize: 18,
  },
  header: {
    paddingTop: 30,
    paddingHorizontal: 30,
    alignItems: 'center',
  },
  logoSection: {
    alignItems: 'center',
    marginBottom: 20,
  },
  partyName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 5,
  },
  tagline: {
    fontSize: 16,
    color: '#E0E0E0',
  },
  content: {
    flex: 1,
    paddingHorizontal: 30,
    justifyContent: 'center',
  },
  welcomeSection: {
    alignItems: 'center',
    marginBottom: 60,
  },
  title: {
    fontSize: 36,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
    marginBottom: 15,
  },
  subtitle: {
    fontSize: 18,
    color: '#E0E0E0',
    textAlign: 'center',
    lineHeight: 26,
  },
  buttonSection: {
    gap: 20,
  },
  loginButton: {
    backgroundColor: '#2D5016',
    paddingVertical: 18,
    borderRadius: 12,
    alignItems: 'center',
  },
  loginButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  registerButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: 'white',
    paddingVertical: 18,
    borderRadius: 12,
    alignItems: 'center',
  },
  registerButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  imageContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    width: '100%'
  },
  flagImage: {
    width: 250,
    height: 200,
    marginVertical: 10
  },
});


# ==== ./mobile-app/app/roles.tsx ====

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function RoleManagement() {
  const { user } = useAuth();
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);
  const isAdmin = user?.role === 'admin';

  useEffect(() => {
    loadMembers();
  }, []);

  const loadMembers = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch('http://192.168.1.65:5000/api/members/all', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        setMembers(data);
      } else {
        Alert.alert('Error', 'Failed to load members');
      }
    } catch (error) {
      console.error('Load members error:', error);
      Alert.alert('Error', 'Network error');
    } finally {
      setLoading(false);
    }
  };

  const updateMemberRole = async (memberId, newRole) => {
    try {
      console.log('Updating member:', memberId, 'to role:', newRole);
      const token = await AsyncStorage.getItem('token');
      const response = await fetch(`http://192.168.1.65:5000/api/members/role/${memberId}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ role: newRole }),
      });
      console.log('Response status:', response.status); // Add this
      const responseData = await response.json(); // Add this
      console.log('Response data:', responseData); // Add this


      if (response.ok) {
        Alert.alert('Success', 'Role updated successfully');
        loadMembers(); // Reload the list
      } else {
        Alert.alert('Error', 'Failed to update role');
      }
    } catch (error) {
      console.error('Update role error:', error);
      Alert.alert('Error', 'Network error');
    }
  };

  const deleteMember = async (memberId) => {
    if (!isAdmin) {
      Alert.alert('Access Denied', 'Only admins can delete members');
      return;
    }

    Alert.alert(
      'Delete Member',
      'Are you sure you want to delete this member? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem('token');
              const response = await fetch(`http://192.168.1.65:5000/api/members/${memberId}`, {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({  // Add the required confirmationText
                  confirmationText: 'DELETE MEMBER'
                }),
              });

              if (response.ok) {
                Alert.alert('Success', 'Member deleted successfully');
                loadMembers();
              } else {
                const errorData = await response.json();
                Alert.alert('Error', errorData.message || 'Failed to delete member');
              }
            } catch (error) {
              console.error('Delete member error:', error);
              Alert.alert('Error', 'Network error');
            }
          }
        }
      ]
    );
  };

  const showRoleOptions = (member) => {
    const options = ['member', 'organizer'];
    if (isAdmin) {
      options.push('admin');
    }

    Alert.alert(
      'Change Role',
      `Select new role for ${member.personalInfo.fullName}:`,
      [
        ...options.map(role => ({
          text: role.charAt(0).toUpperCase() + role.slice(1),
          onPress: () => {
            if (role !== member.role) {
              updateMemberRole(member._id, role);
            }
          }
        })),
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  };

  const renderMember = ({ item }) => (
    <View style={styles.memberCard}>
      <View style={styles.memberHeader}>
        <View style={styles.avatar}>
          <Text style={styles.avatarText}>
            {item.personalInfo.fullName.charAt(0).toUpperCase()}
          </Text>
        </View>
        <View style={styles.memberInfo}>
          <Text style={styles.memberName}>{item.personalInfo.fullName}</Text>
          <Text style={styles.memberId}>ID: {item.membershipId}</Text>
          <Text style={styles.memberEmail}>{item.personalInfo.email}</Text>
        </View>
      </View>

      <View style={styles.memberActions}>
        <View style={styles.currentRole}>
          <Text style={styles.roleLabel}>Current Role:</Text>
          <Text style={[
            styles.roleValue,
            { 
              color: item.role === 'admin' ? '#FF5722' : 
                     item.role === 'organizer' ? '#2196F3' : '#4CAF50'
            }
          ]}>
            {item.role?.toUpperCase() || 'MEMBER'}
          </Text>
        </View>

        <View style={styles.actionButtons}>
          <TouchableOpacity
            style={styles.roleButton}
            onPress={() => showRoleOptions(item)}
          >
            <Text style={styles.roleButtonText}>Change Role</Text>
          </TouchableOpacity>

          {isAdmin && (
            <TouchableOpacity
              style={styles.deleteButton}
              onPress={() => deleteMember(item._id)}
            >
              <Text style={styles.deleteButtonText}>Delete</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    </View>
  );

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Loading...</Text>
        </View>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2D5016" />
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        <Text style={styles.title}>Manage Roles</Text>
      </View>

      <View style={styles.infoCard}>
        <Text style={styles.infoText}>
          {isAdmin 
            ? 'Admin Access: You can change member roles and delete members.'
            : 'Organizer Access: You can change member roles but cannot delete members.'
          }
        </Text>
      </View>

      <FlatList
        data={members}
        renderItem={renderMember}
        keyExtractor={(item) => item._id.toString()}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
      />

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#1B2951',
    paddingVertical: 15,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    marginRight: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
  },
  title: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  infoCard: {
    backgroundColor: '#E3F2FD',
    margin: 15,
    padding: 15,
    borderRadius: 8,
    borderLeftWidth: 4,
    borderLeftColor: '#2196F3',
  },
  infoText: {
    fontSize: 14,
    color: '#1565C0',
  },
  listContainer: {
    paddingVertical: 10,
  },
  memberCard: {
    backgroundColor: 'white',
    marginHorizontal: 15,
    marginVertical: 5,
    borderRadius: 12,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  memberHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
  },
  avatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#2D5016',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  avatarText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
  },
  memberInfo: {
    flex: 1,
  },
  memberName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 2,
  },
  memberId: {
    fontSize: 14,
    color: '#2D5016',
    fontWeight: '600',
    marginBottom: 2,
  },
  memberEmail: {
    fontSize: 14,
    color: '#666',
  },
  memberActions: {
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    paddingTop: 15,
  },
  currentRole: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  roleLabel: {
    fontSize: 14,
    color: '#666',
    marginRight: 10,
  },
  roleValue: {
    fontSize: 14,
    fontWeight: 'bold',
  },
  actionButtons: {
    flexDirection: 'row',
    gap: 10,
  },
  roleButton: {
    backgroundColor: '#2196F3',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 6,
    flex: 1,
  },
  roleButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  deleteButton: {
    backgroundColor: '#F44336',
    paddingVertical: 8,
    paddingHorizontal: 15,
    borderRadius: 6,
    flex: 1,
  },
  deleteButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

# ==== ./mobile-app/app/location-attendance.tsx ====

// mobile-app/app/location-attendance.tsx
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
    },
    border: '#eee',
  },
  spacing: {
    md: 16,
    lg: 24,
    xl: 32,
  },
  typography: {
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
  },
  borderRadius: {
    lg: 12,
  },
};

const LOCATIONS = [
  {
    id: 'central',
    name: 'Central Party Office',
    address: 'Main headquarters, Darjeeling',
    icon: '🏛️',
    description: 'Main party headquarters for administrative work'
  },
  {
    id: 'darjeeling',
    name: 'Party Office Darjeeling',
    address: 'Darjeeling district office',
    icon: '🏢',
    description: 'District office for Darjeeling region'
  },
  {
    id: 'kalimpong',
    name: 'Party Office Kalimpong',
    address: 'Kalimpong district office',
    icon: '🏢',
    description: 'District office for Kalimpong region'
  },
  {
    id: 'kurseong',
    name: 'Party Office Kurseong',
    address: 'Kurseong district office',
    icon: '🏢',
    description: 'District office for Kurseong region'
  },
];

export default function LocationAttendanceScreen() {
  const { user } = useAuth();

  const isOrganizer = () => user?.role === 'organizer' || user?.role === 'admin';

  const handleLocationSelect = (location) => {
    // Navigate to attendance scanner with selected location
    router.push({
      pathname: '/attendance-scanner',
      params: { 
        scanType: 'location',
        selectedLocation: location.name 
      }
    });
  };

  const renderLocationItem = ({ item }) => (
    <TouchableOpacity
      style={styles.locationCard}
      onPress={() => handleLocationSelect(item)}
    >
      <View style={styles.locationHeader}>
        <Text style={styles.locationIcon}>{item.icon}</Text>
        <View style={styles.locationInfo}>
          <Text style={styles.locationName}>{item.name}</Text>
          <Text style={styles.locationAddress}>{item.address}</Text>
        </View>
        <Text style={styles.locationArrow}>→</Text>
      </View>
      <Text style={styles.locationDescription}>{item.description}</Text>
    </TouchableOpacity>
  );

  if (!isOrganizer()) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Location Attendance</Text>
        </View>
        <View style={styles.accessDenied}>
          <Text style={styles.accessDeniedText}>Access Denied</Text>
          <Text style={styles.accessDeniedSubtext}>Only organizers can mark location attendance</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        <Text style={styles.title}>Location Attendance</Text>
      </View>

      <View style={styles.content}>
        <View style={styles.instructionCard}>
          <Text style={styles.instructionTitle}>📍 Location-Based Attendance</Text>
          <Text style={styles.instructionText}>
            Select a party office location to mark member attendance for visits and meetings at that location.
          </Text>
        </View>

        <FlatList
          data={LOCATIONS}
          renderItem={renderLocationItem}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.locationsList}
          showsVerticalScrollIndicator={false}
        />
      </View>

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
  },
  title: {
    ...Theme.typography.h4,
    color: Theme.colors.text.onPrimary,
    flex: 1,
    textAlign: 'center',
    marginLeft: Theme.spacing.md,
  },
  content: {
    flex: 1,
    padding: Theme.spacing.lg,
  },
  instructionCard: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.lg,
    borderLeftWidth: 4,
    borderLeftColor: Theme.colors.secondary,
  },
  instructionTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
  },
  instructionText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    lineHeight: 24,
  },
  locationsList: {
    paddingBottom: Theme.spacing.xl,
  },
  locationCard: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.md,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  locationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Theme.spacing.md,
  },
  locationIcon: {
    fontSize: 24,
    marginRight: Theme.spacing.md,
  },
  locationInfo: {
    flex: 1,
  },
  locationName: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: 4,
  },
  locationAddress: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
  },
  locationArrow: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    fontSize: 20,
  },
  locationDescription: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontStyle: 'italic',
  },
  accessDenied: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  accessDeniedText: {
    ...Theme.typography.h3,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
  },
  accessDeniedSubtext: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
  },
});

# ==== ./mobile-app/app/login.tsx ====

// mobile-app/app/login.tsx - COMPLETE FILE
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Alert,
  KeyboardAvoidingView,
  Platform,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import { authAPI, handleApiError } from '../services/apiService';

const partyFlag = require('./images/flag.jpeg');

export default function LoginScreen() {
  const [identifier, setIdentifier] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();

  const handleLogin = async () => {
    // Input validation
    if (!identifier.trim() || !password.trim()) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    setLoading(true);

    try {
      console.log('🔐 Starting login process...');
      
      // Call the API using our service
      const result = await authAPI.login(identifier.trim(), password);
      
      if (result.success) {
        console.log('✅ Login successful');
        
        // Save user data using auth context
        await login(result.data.token, result.data.user);
        
        // Navigate based on user role
        if (result.data.user.role === 'admin') {
          router.replace('/admin');
        } else {
          router.replace('/dashboard');
        }
      } else {
        console.log('❌ Login failed:', result.error);
        Alert.alert('Login Failed', result.error || 'Invalid credentials');
      }
    } catch (error) {
      console.error('🚨 Login error:', error);
      Alert.alert('Connection Error', handleApiError(error));
    } finally {
      setLoading(false);
    }
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container} 
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <SafeAreaView style={styles.container}>
        <StatusBar style="light" />
        
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          
          <View style={styles.logoSection}>
            <Text style={styles.partyName}>INDIAN GORKHA JANSHAKTI FRONT</Text>
            <Text style={styles.title}>Member Login</Text>
          </View>
        </View>

        
        {/* Flag Image */}
        <View style={styles.imageContainer}>
          <Image 
            source={partyFlag} 
            style={styles.flagImage} 
            resizeMode="contain"
            onError={(error) => console.error('Image loading error:', error.nativeEvent.error)}
            defaultSource={require('./images/flag.jpeg')}
          />
        </View>

        {/* Form */}
        <View style={styles.form}>
          <TextInput
            style={styles.input}
            placeholder="Email or Phone"
            placeholderTextColor="#999"
            value={identifier}
            onChangeText={setIdentifier}
            autoCapitalize="none"
            autoCorrect={false}
            keyboardType="email-address"
            editable={!loading}
          />
          
          <TextInput
            style={styles.input}
            placeholder="Password"
            placeholderTextColor="#999"
            value={password}
            onChangeText={setPassword}
            secureTextEntry
            autoCapitalize="none"
            autoCorrect={false}
            editable={!loading}
          />

          <TouchableOpacity
            style={[styles.loginButton, loading && styles.disabledButton]}
            onPress={handleLogin}
            disabled={loading}
          >
            <Text style={styles.loginButtonText}>
              {loading ? 'Logging in...' : 'Login'}
            </Text>
          </TouchableOpacity>

          {/* Register Link */}
          <TouchableOpacity
            style={styles.registerLink}
            onPress={() => router.push('/register')}
          >
            <Text style={styles.registerText}>
              Don't have an account? <Text style={styles.registerTextBold}>Register</Text>
            </Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1B2951',
  },
  header: {
    paddingTop: 20,
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  backButton: {
    marginBottom: 20,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  logoSection: {
    alignItems: 'center',
  },
  partyName: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 10,
    textAlign: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },

  imageContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 10,
    width: '100%'
  },
  flagImage: {
    width: 250,
    height: 150,
    marginVertical: 5
  },
  form: {
    flex: 1,
    paddingHorizontal: 30,
    paddingTop: 20, // reduced from 40 to accommodate the image
  },
  
  input: {
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderRadius: 8,
    marginBottom: 20,
    fontSize: 16,
  },
  loginButton: {
    backgroundColor: '#2D5016',
    paddingVertical: 15,
    borderRadius: 8,
    marginTop: 10,
  },
  loginButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  disabledButton: {
    backgroundColor: '#999',
    opacity: 0.6,
  },
  registerLink: {
    alignItems: 'center',
    marginTop: 30,
    paddingVertical: 10,
  },
  registerText: {
    color: 'white',
    fontSize: 16,
    opacity: 0.8,
  },
  registerTextBold: {
    color: 'white',
    fontWeight: 'bold',
    opacity: 1,
  },
});

# ==== ./mobile-app/app/dashboard.tsx ====

// File: mobile-app/app/dashboard.tsx - FIXED LAYOUT VERSION with Flag
import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  Image,
  Modal,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import QRCode from 'react-native-qrcode-svg';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { apiRequest } from '../utils/apiUtils';
import { User } from '../contexts/AuthContext'; 

// Party flag image - Comment this out if you don't have the flag image
// const partyFlag = require('./images/flag.jpeg');

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    accent: '#E0E0E0',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
      onSecondary: '#ffffff',
    },
    border: '#eee',
    success: '#4CAF50',
    warning: '#FF9800',
    gold: '#FFD700',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
    xxl: 40,
  },
  typography: {
    h1: { fontSize: 32, fontWeight: 'bold' as const },
    h2: { fontSize: 28, fontWeight: 'bold' as const },
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
  },
  shadows: {
    card: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.2,
      shadowRadius: 8,
      elevation: 8,
    },
    sm: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.1,
      shadowRadius: 2,
      elevation: 2,
    },
  },
};

interface UserWithPersonalInfo extends User {
  personalInfo?: {
    fullName: string;
    fatherName: string;
    address: string;
    phone: string;
    email: string;
    dateOfBirth: string;
    occupation: string;
    constituency: string;
    city: string;
    state: string;
    pincode: string;
    gender: string;
  };
}

export default function Dashboard() {
  const { user, logout, login } = useAuth();
  const [profile, setProfile] = useState<UserWithPersonalInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showFullDetails, setShowFullDetails] = useState(false);
  
  const hasLoadedProfile = useRef(false);
  const isLoadingProfile = useRef(false);

  const loadProfile = useCallback(async () => {
    if (isLoadingProfile.current) {
      return;
    }

    try {
      isLoadingProfile.current = true;
      setLoading(true);
      setRefreshing(true);
      
      const response = await apiRequest<{ personalInfo: User }>(`/members/profile`, {
        method: 'GET',
      });
      
      if (response.success && response.data) {
        const { personalInfo, ...rest } = response.data;
        const formattedProfile = { ...rest, ...personalInfo };
        
        const token = await AsyncStorage.getItem('token');
        if (token && JSON.stringify(formattedProfile) !== JSON.stringify(user)) {
          await login(token, formattedProfile as User);
        }

        setProfile(formattedProfile as UserWithPersonalInfo);
        hasLoadedProfile.current = true;
      } else {
        setProfile(user as UserWithPersonalInfo);
        hasLoadedProfile.current = true;
      }
      
    } catch (error) {
      setProfile(user as UserWithPersonalInfo);
      hasLoadedProfile.current = true;
    } finally {
      setLoading(false);
      setRefreshing(false);
      isLoadingProfile.current = false;
    }
  }, [user, login]);

  useEffect(() => {
    if (!hasLoadedProfile.current && user && !isLoadingProfile.current) {
      loadProfile();
    }
  }, [user, loadProfile]);

  const onRefresh = useCallback(() => {
    hasLoadedProfile.current = false;
    setRefreshing(true);
    loadProfile();
  }, [loadProfile]);

  const handleLogout = () => {
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Logout', 
          onPress: async () => {
            await logout();
            router.replace('/');
          }
        },
      ]
    );
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Not available';
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return 'Invalid date';
    }
  };
  
  const getDisplayValue = (value: any, fallback = 'Not provided') => {
    return value && String(value).trim() ? String(value) : fallback;
  };

  const getDisplayName = () => {
    const profileName = profile?.fullName || profile?.name;
    const userName = user?.fullName || user?.name;
    return profileName || userName || 'Member';
  };

  const getProfileImageUri = () => {
    const photoPath = profile?.profilePhoto || user?.profilePhoto;
    
    if (photoPath) {
      let imageUri;
      if (photoPath.startsWith('http')) {
        imageUri = photoPath;
      } else {
        const cleanPath = photoPath.startsWith('/') ? photoPath.substring(1) : photoPath;
        imageUri = `http://192.168.1.65:5000/${cleanPath}`;
      }
      
      return imageUri;
    }
    return null;
  };

  const isAdmin = () => {
    return (profile?.role || user?.role) === 'admin';
  };

  const isOrganizer = () => {
    return (profile?.role || user?.role) === 'organizer';
  };

  if (loading && !profile && !user) {
    return (
      <SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Theme.colors.primary} />
          <Text style={styles.loadingText}>Loading profile...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container} edges={['top', 'left', 'right']}>
      <ScrollView 
        style={styles.scrollView} 
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View style={styles.header}>
          <View style={styles.headerContent}>
            <View style={styles.headerLeft}>
              <Text style={styles.roleText}>
                {isAdmin() ? 'ADMIN ACCOUNT' : isOrganizer() ? 'ORGANIZER ACCOUNT' : 'MEMBER ACCOUNT'}
              </Text>
              <Text style={styles.nameText}>{getDisplayName()}</Text>
            </View>
            <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
              <Text style={styles.logoutText}>Logout</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.membershipCardContainer}>
          <View style={[
            styles.membershipCard, 
            isAdmin() && styles.adminCard,
            isOrganizer() && styles.organizerCard
          ]}>
            <View style={styles.cardHeader}>
              <View style={[
                styles.roleBadge,
                isAdmin() && styles.adminBadge,
                isOrganizer() && styles.organizerBadge
              ]}>
                <Text style={styles.roleBadgeText}>
                  {isAdmin() ? '👑 ADMIN' : isOrganizer() ? '👥 ORGANIZER' : '👤 MEMBER'}
                </Text>
              </View>

              {/* Flag section - comment out if you don't have the image */}
              {/*
              <View style={styles.flagContainer}>
                <Image 
                  source={partyFlag} 
                  style={styles.flagImage} 
                  resizeMode="contain"
                />
              </View>
              */}
              
              <Text style={styles.partyName}>INDIAN GORKHA JANSHAKTI FRONT</Text>
            </View>

            {/* NEW LAYOUT: QR code left, Profile picture right */}
            <View style={styles.cardContent}>
              {/* Top Row: QR Code (Left) and Profile Picture (Right) */}
              <View style={styles.topRow}>
                {/* QR Code Section - LEFT */}
                <View style={styles.qrSection}>
                  <View style={styles.qrContainer}>
                    <QRCode
                      value={profile?.membershipId || user?.membershipId || 'No ID'}
                      size={100}
                      color={Theme.colors.primary}
                      backgroundColor="transparent"
                    />
                  </View>
                  <Text style={styles.qrLabel}>Scan for Verification</Text>
                </View>

                {/* Profile Picture Section - RIGHT */}
                <View style={styles.photoSection}>
                  {getProfileImageUri() ? (
                    <Image 
                      source={{ uri: getProfileImageUri() }}
                      style={styles.profileImage}
                    />
                  ) : (
                    <View style={styles.avatarContainer}>
                      <Text style={styles.avatarText}>
                        {getDisplayName().charAt(0)?.toUpperCase()}
                      </Text>
                    </View>
                  )}
                </View>
              </View>

              {/* Bottom Section: Member Info */}
              <View style={styles.memberInfoSection}>
                <Text style={styles.memberName}>{getDisplayName()}</Text>
                <Text style={styles.membershipId}>
                  {getDisplayValue(profile?.membershipId || user?.membershipId)}
                </Text>
                
                <View style={styles.memberDetailsRow}>
                  <View style={styles.memberSince}>
                    <Text style={styles.memberSinceLabel}>Member Since</Text>
                    <Text style={styles.memberSinceDate}>
                      {formatDate(profile?.createdAt || user?.createdAt)}
                    </Text>
                  </View>

                  <View style={[
                    styles.statusBadge,
                    (profile?.isVerified || user?.isVerified) && styles.verifiedBadge
                  ]}>
                    <Text style={[
                      styles.statusText,
                      (profile?.isVerified || user?.isVerified) && styles.verifiedText
                    ]}>
                      {(profile?.isVerified || user?.isVerified) ? '✓ VERIFIED' : '⏳ PENDING'}
                    </Text>
                  </View>
                </View>
              </View>
            </View>

            <TouchableOpacity 
              style={styles.viewDetailsButton}
              onPress={() => setShowFullDetails(true)}
            >
              <Text style={styles.viewDetailsText}>📋 View Full Information</Text>
              <Text style={styles.viewDetailsArrow}>→</Text>
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.quickActions}>
          <Text style={styles.quickActionsTitle}>Quick Actions</Text>
          
          <View style={styles.actionGrid}>
            <TouchableOpacity
              style={styles.actionCard}
              onPress={() => router.push('/profile-edit')}
            >
              <Text style={styles.actionIcon}>✏️</Text>
              <Text style={styles.actionLabel}>Edit Profile</Text>
            </TouchableOpacity>

            {/* ADD THIS NEW EVENTS BUTTON */}
            <TouchableOpacity
              style={styles.actionCard}
              onPress={() => router.push('/events')}
            >
              <Text style={styles.actionIcon}>📅</Text>
              <Text style={styles.actionLabel}>Events</Text>
            </TouchableOpacity>

            {isAdmin() && (
              <TouchableOpacity
                style={[styles.actionCard, styles.adminAction]}
                onPress={() => router.push('/admin')}
              >
                <Text style={styles.actionIcon}>🛠️</Text>
                <Text style={[styles.actionLabel, styles.adminActionText]}>Admin Dashboard</Text>
              </TouchableOpacity>
            )}

            {(isAdmin() || isOrganizer()) && (
              <>
                <TouchableOpacity
                  style={styles.actionCard}
                  onPress={() => router.push('/scanner')}
                >
                  <Text style={styles.actionIcon}>📱</Text>
                  <Text style={styles.actionLabel}>Scan QR</Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={styles.actionCard}
                  onPress={() => router.push('/members')}
                >
                  <Text style={styles.actionIcon}>👥</Text>
                  <Text style={styles.actionLabel}>View Members</Text>
                </TouchableOpacity>
              </>
            )}
          </View>
        </View>
      </ScrollView>

      {/* Modal remains the same */}
      <Modal
        visible={showFullDetails}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <SafeAreaView style={styles.modalContainer} edges={['top', 'left', 'right']}>
          <View style={styles.modalHeader}>
            <TouchableOpacity 
              onPress={() => setShowFullDetails(false)}
              style={styles.closeButton}
            >
              <Text style={styles.closeButtonText}>✕ Close</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Complete Profile</Text>
            <TouchableOpacity 
              onPress={() => {
                setShowFullDetails(false);
                router.push('/profile-edit');
              }}
              style={styles.editButton}
            >
              <Text style={styles.editButtonText}>Edit</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            <View style={styles.detailSection}>
              <Text style={styles.detailSectionTitle}>Personal Information</Text>
              
              <View style={styles.detailGrid}>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Full Name</Text>
                  <Text style={styles.detailValue}>{getDisplayValue(profile?.fullName || user?.fullName)}</Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Father's Name</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.fatherName || user?.fatherName)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Email</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.email || user?.email)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Phone</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.phone || user?.phone)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Date of Birth</Text>
                  <Text style={styles.detailValue}>
                    {formatDate(profile?.dateOfBirth || user?.dateOfBirth)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Gender</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.gender || user?.gender)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Occupation</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.occupation || user?.occupation)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Aadhar Number</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.aadharNumber || user?.aadharNumber, 'Not Provided')}
                  </Text>
                </View>
                
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Aadhar Verified</Text>
                  <Text style={[styles.detailValue, (profile?.aadharVerified || user?.aadharVerified) ? styles.verifiedText : styles.pendingText]}>
                    {(profile?.aadharVerified || user?.aadharVerified) ? 'Verified' : 'Not Verified'}
                  </Text>
                </View>
              </View>
            </View>

            <View style={styles.detailSection}>
              <Text style={styles.detailSectionTitle}>Address Information</Text>
              
              <View style={styles.detailGrid}>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Address</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.address || user?.address)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>City</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.city || user?.city)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>State</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.state || user?.state)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Pincode</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.pincode || user?.pincode)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Constituency</Text>
                  <Text style={styles.detailValue}>
                    {getDisplayValue(profile?.constituency || user?.constituency)}
                  </Text>
                </View>
              </View>
            </View>

            <View style={styles.detailSection}>
              <Text style={styles.detailSectionTitle}>Membership Information</Text>
              
              <View style={styles.detailGrid}>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Membership ID</Text>
                  <Text style={[styles.detailValue, styles.membershipIdText]}>
                    {getDisplayValue(profile?.membershipId || user?.membershipId)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Role</Text>
                  <Text style={[styles.detailValue, styles.detailRoleText]}>
                    {((profile?.role || user?.role) || 'member').toUpperCase()}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Join Date</Text>
                  <Text style={styles.detailValue}>
                    {formatDate(profile?.createdAt || user?.createdAt)}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Verification Status</Text>
                  <Text style={[
                    styles.detailValue,
                    (profile?.isVerified || user?.isVerified) ? styles.verifiedText : styles.pendingText
                  ]}>
                    {(profile?.isVerified || user?.isVerified) ? 'Verified ✓' : 'Pending Verification ⏳'}
                  </Text>
                </View>
              </View>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    backgroundColor: Theme.colors.primary,
    paddingBottom: Theme.spacing.lg,
  },
  headerContent: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    paddingHorizontal: Theme.spacing.lg,
    paddingTop: Theme.spacing.lg,
  },
  headerLeft: {
    flex: 1,
  },
  roleText: {
    ...Theme.typography.caption,
    color: Theme.colors.gold,
    fontWeight: '700',
    letterSpacing: 1,
  },
  nameText: {
    ...Theme.typography.h3,
    color: Theme.colors.text.onPrimary,
    marginTop: Theme.spacing.xs,
  },
  logoutButton: {
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.sm,
    borderRadius: Theme.borderRadius.md,
    borderWidth: 1,
    borderColor: Theme.colors.text.onPrimary,
  },
  logoutText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  membershipCardContainer: {
    paddingHorizontal: Theme.spacing.lg,
    paddingTop: Theme.spacing.lg,
  },
  membershipCard: {
    backgroundColor: Theme.colors.surface,
    borderRadius: Theme.borderRadius.xl,
    padding: Theme.spacing.lg,
    ...Theme.shadows.card,
    borderLeftWidth: 4,
    borderLeftColor: Theme.colors.secondary,
  },
  adminCard: {
    borderLeftColor: Theme.colors.gold,
    backgroundColor: '#FFF9E6',
  },
  organizerCard: {
    borderLeftColor: '#2196F3',
    backgroundColor: '#E3F2FD',
  },
  cardHeader: {
    alignItems: 'center',
    marginBottom: Theme.spacing.lg,
  },
  roleBadge: {
    backgroundColor: Theme.colors.secondary,
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.xs,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.sm,
  },
  adminBadge: {
    backgroundColor: Theme.colors.gold,
  },
  organizerBadge: {
    backgroundColor: '#2196F3',
  },
  roleBadgeText: {
    ...Theme.typography.caption,
    color: Theme.colors.text.onSecondary,
    fontWeight: '700',
    letterSpacing: 0.5,
  },
  flagContainer: {
    alignItems: 'center',
    marginVertical: Theme.spacing.md,
    width: '100%',
  },
  flagImage: {
    width: 200,
    height: 100,
    marginVertical: 5,
  },
  partyName: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '600',
    textAlign: 'center',
    letterSpacing: 1,
  },
  
  // NEW LAYOUT STYLES
  cardContent: {
    marginBottom: Theme.spacing.lg,
  },
  
  // Top row with QR code left and profile picture right
  topRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.sm,
  },
  
  // QR Code Section (LEFT)
  qrSection: {
    alignItems: 'center',
    flex: 1,
  },
  qrContainer: {
    padding: Theme.spacing.sm,
    backgroundColor: Theme.colors.surface,
    borderRadius: Theme.borderRadius.md,
    marginBottom: Theme.spacing.xs,
    ...Theme.shadows.sm,
  },
  qrLabel: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
    fontSize: 11,
  },
  
  // Profile Picture Section (RIGHT)
  photoSection: {
    alignItems: 'center',
    flex: 1,
  },
  profileImage: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: Theme.colors.background,
    borderWidth: 3,
    borderColor: Theme.colors.surface,
    ...Theme.shadows.sm,
  },
  avatarContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: Theme.colors.secondary,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 3,
    borderColor: Theme.colors.surface,
    ...Theme.shadows.sm,
  },
  avatarText: {
    ...Theme.typography.h2,
    color: Theme.colors.text.onSecondary,
  },
  
  // Member Info Section (BOTTOM)
  memberInfoSection: {
    alignItems: 'center',
    paddingHorizontal: Theme.spacing.md,
  },
  memberName: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    textAlign: 'center',
    marginBottom: Theme.spacing.xs,
  },
  membershipId: {
    ...Theme.typography.body1,
    color: Theme.colors.primary,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: Theme.spacing.md,
    letterSpacing: 1,
    fontSize: 18,
  },
  
  // Row for member since and status
  memberDetailsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: '100%',
    paddingHorizontal: Theme.spacing.md,
  },
  memberSince: {
    alignItems: 'flex-start',
    flex: 1,
  },
  memberSinceLabel: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
    textTransform: 'uppercase',
    letterSpacing: 0.5,
    fontSize: 11,
  },
  memberSinceDate: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    fontWeight: '600',
    fontSize: 12,
  },
  statusBadge: {
    paddingHorizontal: Theme.spacing.sm,
    paddingVertical: Theme.spacing.xs,
    borderRadius: Theme.borderRadius.sm,
    backgroundColor: '#FFF3E0',
    borderWidth: 1,
    borderColor: Theme.colors.warning,
  },
  verifiedBadge: {
    backgroundColor: '#E8F5E8',
    borderColor: Theme.colors.success,
  },
  statusText: {
    ...Theme.typography.caption,
    color: Theme.colors.warning,
    fontWeight: '600',
    letterSpacing: 0.5,
    fontSize: 11,
  },
  verifiedText: {
    color: Theme.colors.success,
  },
  
  // Rest of the styles...
  viewDetailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: Theme.colors.background,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    borderWidth: 1,
    borderColor: Theme.colors.border,
  },
  viewDetailsText: {
    ...Theme.typography.body1,
    color: Theme.colors.primary,
    fontWeight: '600',
  },
  viewDetailsArrow: {
    ...Theme.typography.h4,
    color: Theme.colors.primary,
  },
  quickActions: {
    padding: Theme.spacing.lg,
  },
  quickActionsTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
  },
  actionGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: Theme.spacing.md,
  },
  actionCard: {
    backgroundColor: Theme.colors.surface,
    paddingVertical: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    alignItems: 'center',
    minWidth: '45%',
    ...Theme.shadows.sm,
  },
  adminAction: {
    backgroundColor: Theme.colors.gold,
  },
  actionIcon: {
    fontSize: 24,
    marginBottom: Theme.spacing.sm,
  },
  actionLabel: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    fontWeight: '600',
    textAlign: 'center',
  },
  adminActionText: {
    color: Theme.colors.text.onSecondary,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: Theme.spacing.lg,
    paddingVertical: Theme.spacing.md,
    backgroundColor: Theme.colors.surface,
    borderBottomWidth: 1,
    borderBottomColor: Theme.colors.border,
  },
  closeButton: {
    minWidth: 60,
  },
  closeButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  modalTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    flex: 1,
    textAlign: 'center',
  },
  editButton: {
    minWidth: 60,
    alignItems: 'flex-end',
  },
  editButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.secondary,
    fontWeight: '600',
  },
  modalContent: {
    flex: 1,
  },
  detailSection: {
    backgroundColor: Theme.colors.surface,
    margin: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
    ...Theme.shadows.sm,
  },
  detailSectionTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
    borderBottomWidth: 2,
    borderBottomColor: Theme.colors.primary,
    paddingBottom: Theme.spacing.sm,
  },
  detailGrid: {
    gap: Theme.spacing.md,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    paddingVertical: Theme.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: Theme.colors.border,
  },
  detailLabel: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '500',
    flex: 1,
  },
  detailValue: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    fontWeight: '400',
    flex: 2,
    textAlign: 'right',
  },
  membershipIdText: {
    fontWeight: '700',
    color: Theme.colors.primary,
  },
  detailRoleText: {
    fontWeight: '700',
    color: Theme.colors.secondary,
    textTransform: 'capitalize',
  },
  pendingText: {
    color: Theme.colors.warning,
    fontWeight: '600',
  },
});

# ==== ./mobile-app/app/profile-edit.tsx ====

// app/profile-edit.tsx - Enhanced with all user profile fields
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Theme for consistency
const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    accent: '#E0E0E0',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
      onSecondary: '#ffffff',
    },
    border: '#e0e0e0',
    success: '#4CAF50',
    error: '#F44336',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
    xxl: 40,
  },
  typography: {
    h1: { fontSize: 32, fontWeight: 'bold' as const },
    h2: { fontSize: 28, fontWeight: 'bold' as const },
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
  },
};

export default function ProfileEdit() {
  const { user, login } = useAuth();
  const [formData, setFormData] = useState({
    // Basic Info
    fullName: '',
    fatherName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
    gender: '',
    occupation: '',
    
    // Address Info
    address: '',
    city: '',
    state: '',
    pincode: '',
    constituency: '',
    
    // Additional Info
    aadharNumber: '',
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (user) {
      setFormData({
        fullName: user.fullName || user.name || '',
        fatherName: user.fatherName || '',
        email: user.email || '',
        phone: user.phone || '',
        dateOfBirth: formatDateForInput(user.dateOfBirth) || '',
        gender: user.gender || '',
        occupation: user.occupation || '',
        address: user.address || '',
        city: user.city || '',
        state: user.state || '',
        pincode: user.pincode || '',
        constituency: user.constituency || '',
        aadharNumber: user.aadharNumber || '',
      });
    }
  }, [user]);

  const formatDateForInput = (dateString) => {
    if (!dateString) return '';
    try {
      const date = new Date(dateString);
      return date.toISOString().split('T')[0]; // Returns YYYY-MM-DD
    } catch {
      return '';
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value,
    }));
    
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: null,
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // Required fields validation
    if (!formData.fullName.trim()) {
      newErrors.fullName = 'Full name is required';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else {
      // Email format validation
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        newErrors.email = 'Please enter a valid email address';
      }
    }
    
    // Phone validation
    if (formData.phone && formData.phone.trim()) {
      const phoneRegex = /^[\+]?[\d\s\-\(\)]{8,15}$/;
      if (!phoneRegex.test(formData.phone)) {
        newErrors.phone = 'Please enter a valid phone number';
      }
    }
    
    // Date validation
    if (formData.dateOfBirth) {
      const date = new Date(formData.dateOfBirth);
      const today = new Date();
      const age = today.getFullYear() - date.getFullYear();
      if (age < 18 || age > 100) {
        newErrors.dateOfBirth = 'Age must be between 18 and 100 years';
      }
    }
    
    // Aadhar number validation (if provided)
    if (formData.aadharNumber && formData.aadharNumber.trim()) {
      if (!/^\d{12}$/.test(formData.aadharNumber.replace(/\s/g, ''))) {
        newErrors.aadharNumber = 'Aadhar number must be 12 digits';
      }
    }
    
    // Pincode validation (if provided)
    if (formData.pincode && formData.pincode.trim()) {
      if (!/^\d{6}$/.test(formData.pincode)) {
        newErrors.pincode = 'Pincode must be 6 digits';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = async () => {
    if (!validateForm()) {
      Alert.alert('Validation Error', 'Please correct the highlighted fields');
      return;
    }

    setLoading(true);

    try {
      const token = await AsyncStorage.getItem('token');
      
      // Prepare the data to match backend expectations
      const updateData = {
        fullName: formData.fullName,
        fatherName: formData.fatherName,
        email: formData.email,
        phone: formData.phone,
        dateOfBirth: formData.dateOfBirth,
        occupation: formData.occupation,
        address: formData.address,
        constituency: formData.constituency,
        // Add new fields if your backend supports them
        gender: formData.gender,
        city: formData.city,
        state: formData.state,
        pincode: formData.pincode,
        aadharNumber: formData.aadharNumber,
      };

      const response = await fetch('http://192.168.1.65:5000/api/members/profile', {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      });

      const data = await response.json();

      if (response.ok) {
        // Update the user context with new data
        const updatedUser = {
          ...user,
          ...formData,
          name: formData.fullName, // For compatibility
        };
        
        await login(token, updatedUser);
        
        Alert.alert(
          'Success!',
          'Your profile has been updated successfully.',
          [{ text: 'OK', onPress: () => router.back() }]
        );
      } else {
        Alert.alert('Update Failed', data.message || 'Failed to update profile');
      }
    } catch (error) {
      console.error('Update profile error:', error);
      Alert.alert('Error', 'Network error. Please check your connection and try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        
        <Text style={styles.title}>Edit Profile</Text>
        
        <TouchableOpacity
          style={[styles.saveButton, loading && styles.disabledButton]}
          onPress={handleSave}
          disabled={loading}
        >
          <Text style={[styles.saveButtonText, loading && styles.disabledText]}>
            {loading ? 'Saving...' : 'Save'}
          </Text>
        </TouchableOpacity>
      </View>

      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView 
          style={styles.scrollView}
          showsVerticalScrollIndicator={false}
          keyboardShouldPersistTaps="handled"
        >
          <View style={styles.form}>
            
            {/* Personal Information Section */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Personal Information</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Full Name *</Text>
                <TextInput
                  style={[styles.input, errors.fullName && styles.errorInput]}
                  value={formData.fullName}
                  onChangeText={(value) => handleInputChange('fullName', value)}
                  placeholder="Enter your full name"
                  autoCapitalize="words"
                />
                {errors.fullName && <Text style={styles.errorText}>{errors.fullName}</Text>}
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Father's Name</Text>
                <TextInput
                  style={styles.input}
                  value={formData.fatherName}
                  onChangeText={(value) => handleInputChange('fatherName', value)}
                  placeholder="Enter father's name"
                  autoCapitalize="words"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Email Address *</Text>
                <TextInput
                  style={[styles.input, errors.email && styles.errorInput]}
                  value={formData.email}
                  onChangeText={(value) => handleInputChange('email', value)}
                  placeholder="Enter your email"
                  keyboardType="email-address"
                  autoCapitalize="none"
                  autoCorrect={false}
                />
                {errors.email && <Text style={styles.errorText}>{errors.email}</Text>}
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Phone Number</Text>
                <TextInput
                  style={[styles.input, errors.phone && styles.errorInput]}
                  value={formData.phone}
                  onChangeText={(value) => handleInputChange('phone', value)}
                  placeholder="Enter your phone number"
                  keyboardType="phone-pad"
                />
                {errors.phone && <Text style={styles.errorText}>{errors.phone}</Text>}
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Date of Birth</Text>
                <TextInput
                  style={[styles.input, errors.dateOfBirth && styles.errorInput]}
                  value={formData.dateOfBirth}
                  onChangeText={(value) => handleInputChange('dateOfBirth', value)}
                  placeholder="YYYY-MM-DD"
                />
                {errors.dateOfBirth && <Text style={styles.errorText}>{errors.dateOfBirth}</Text>}
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Gender</Text>
                <TextInput
                  style={styles.input}
                  value={formData.gender}
                  onChangeText={(value) => handleInputChange('gender', value)}
                  placeholder="Male/Female/Other"
                  autoCapitalize="words"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Occupation</Text>
                <TextInput
                  style={styles.input}
                  value={formData.occupation}
                  onChangeText={(value) => handleInputChange('occupation', value)}
                  placeholder="Enter your occupation"
                  autoCapitalize="words"
                />
              </View>
            </View>

            {/* Address Information Section */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Address Information</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Full Address</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={formData.address}
                  onChangeText={(value) => handleInputChange('address', value)}
                  placeholder="Enter your complete address"
                  multiline
                  numberOfLines={3}
                  textAlignVertical="top"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>City</Text>
                <TextInput
                  style={styles.input}
                  value={formData.city}
                  onChangeText={(value) => handleInputChange('city', value)}
                  placeholder="Enter your city"
                  autoCapitalize="words"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>State</Text>
                <TextInput
                  style={styles.input}
                  value={formData.state}
                  onChangeText={(value) => handleInputChange('state', value)}
                  placeholder="Enter your state"
                  autoCapitalize="words"
                />
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Pincode</Text>
                <TextInput
                  style={[styles.input, errors.pincode && styles.errorInput]}
                  value={formData.pincode}
                  onChangeText={(value) => handleInputChange('pincode', value)}
                  placeholder="Enter 6-digit pincode"
                  keyboardType="numeric"
                  maxLength={6}
                />
                {errors.pincode && <Text style={styles.errorText}>{errors.pincode}</Text>}
              </View>

              <View style={styles.inputGroup}>
                <Text style={styles.label}>Constituency</Text>
                <TextInput
                  style={styles.input}
                  value={formData.constituency}
                  onChangeText={(value) => handleInputChange('constituency', value)}
                  placeholder="Enter your constituency"
                  autoCapitalize="words"
                />
              </View>
            </View>

            {/* Additional Information Section */}
            <View style={styles.section}>
              <Text style={styles.sectionTitle}>Additional Information</Text>
              
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Aadhar Number (Optional)</Text>
                <TextInput
                  style={[styles.input, errors.aadharNumber && styles.errorInput]}
                  value={formData.aadharNumber}
                  onChangeText={(value) => handleInputChange('aadharNumber', value)}
                  placeholder="Enter 12-digit Aadhar number"
                  keyboardType="numeric"
                  maxLength={12}
                />
                {errors.aadharNumber && <Text style={styles.errorText}>{errors.aadharNumber}</Text>}
              </View>
            </View>

            {/* Info Card */}
            <View style={styles.infoCard}>
              <Text style={styles.infoTitle}>📝 Note:</Text>
              <Text style={styles.infoText}>
                • Fields marked with * are required{'\n'}
                • Your Membership ID cannot be changed{'\n'}
                • All information will be kept confidential{'\n'}
                • Updated information may take a few minutes to reflect
              </Text>
            </View>

            {/* Read-only Information */}
            <View style={styles.readOnlySection}>
              <Text style={styles.sectionTitle}>Membership Information</Text>
              <View style={styles.readOnlyCard}>
                <View style={styles.readOnlyRow}>
                  <Text style={styles.readOnlyLabel}>Membership ID:</Text>
                  <Text style={styles.readOnlyValue}>{user?.membershipId}</Text>
                </View>
                <View style={styles.readOnlyRow}>
                  <Text style={styles.readOnlyLabel}>Member Since:</Text>
                  <Text style={styles.readOnlyValue}>
                    {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}
                  </Text>
                </View>
                <View style={styles.readOnlyRow}>
                  <Text style={styles.readOnlyLabel}>Status:</Text>
                  <Text style={[styles.readOnlyValue, styles.statusText]}>
                    {user?.isVerified ? 'Verified ✓' : 'Pending Verification'}
                  </Text>
                </View>
              </View>
            </View>

          </View>
        </ScrollView>
      </KeyboardAvoidingView>

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  
  backButton: {
    minWidth: 60,
  },
  
  backButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
  },
  
  title: {
    ...Theme.typography.h4,
    color: Theme.colors.text.onPrimary,
    textAlign: 'center',
    flex: 1,
  },
  
  saveButton: {
    minWidth: 60,
    alignItems: 'flex-end',
  },
  
  saveButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.success,
    fontWeight: '600',
  },

  disabledButton: {
    opacity: 0.6,
  },

  disabledText: {
    color: Theme.colors.text.secondary,
  },
  
  keyboardView: {
    flex: 1,
  },
  
  scrollView: {
    flex: 1,
  },
  
  form: {
    padding: Theme.spacing.lg,
  },
  
  section: {
    marginBottom: Theme.spacing.xl,
  },
  
  sectionTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
    paddingBottom: Theme.spacing.sm,
    borderBottomWidth: 2,
    borderBottomColor: Theme.colors.primary,
  },
  
  inputGroup: {
    marginBottom: Theme.spacing.lg,
  },
  
  label: {
    ...Theme.typography.body2,
    fontWeight: '600',
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.xs,
  },
  
  input: {
    backgroundColor: Theme.colors.surface,
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.sm + 2,
    borderRadius: Theme.borderRadius.md,
    fontSize: Theme.typography.body1.fontSize,
    borderWidth: 1,
    borderColor: Theme.colors.border,
    color: Theme.colors.text.primary,
  },
  
  textArea: {
    height: 80,
    textAlignVertical: 'top',
    paddingTop: Theme.spacing.sm + 2,
  },

  errorInput: {
    borderColor: Theme.colors.error,
    borderWidth: 1.5,
  },

  errorText: {
    ...Theme.typography.caption,
    color: Theme.colors.error,
    marginTop: Theme.spacing.xs,
  },
  
  infoCard: {
    backgroundColor: '#E8F5E8',
    padding: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    marginVertical: Theme.spacing.lg,
    borderLeftWidth: 4,
    borderLeftColor: Theme.colors.success,
  },

  infoTitle: {
    ...Theme.typography.body2,
    fontWeight: '600',
    color: Theme.colors.secondary,
    marginBottom: Theme.spacing.xs,
  },
  
  infoText: {
    ...Theme.typography.caption,
    color: Theme.colors.secondary,
    lineHeight: 16,
  },

  readOnlySection: {
    marginTop: Theme.spacing.lg,
  },

  readOnlyCard: {
    backgroundColor: Theme.colors.surface,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.md,
    borderWidth: 1,
    borderColor: Theme.colors.border,
  },

  readOnlyRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: Theme.spacing.xs,
  },

  readOnlyLabel: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '500',
  },

  readOnlyValue: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    fontWeight: '600',
  },

  statusText: {
    color: Theme.colors.success,
  },
});

# ==== ./mobile-app/app/events.tsx ====

// mobile-app/app/events.tsx
import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  RefreshControl,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import { apiRequest } from '../utils/apiUtils';

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    accent: '#E0E0E0',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
      onSecondary: '#ffffff',
    },
    border: '#eee',
    success: '#4CAF50',
    warning: '#FF9800',
    error: '#F44336',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
  },
  typography: {
    h1: { fontSize: 32, fontWeight: 'bold' as const },
    h2: { fontSize: 28, fontWeight: 'bold' as const },
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
  },
};

interface Event {
  id: string;
  title: string;
  description: string;
  eventDate: string;
  startTime: string;
  endTime: string;
  location: string;
  address: string;
  eventType: string;
  maxAttendees: number;
  isActive: boolean;
  attendanceCount: number;
  creator: {
    fullName: string;
    role: string;
  };
  createdAt: string;
}

export default function EventsScreen() {
  const { user } = useAuth();
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [filter, setFilter] = useState<'all' | 'upcoming' | 'past'>('upcoming');

  const isAdmin = () => user?.role === 'admin';
  const isOrganizer = () => user?.role === 'organizer' || user?.role === 'admin';

  const loadEvents = useCallback(async () => {
    try {
      const queryParams = new URLSearchParams({
        active: 'true',
        ...(filter === 'upcoming' && { upcoming: 'true' }),
        ...(filter === 'past' && { past: 'true' }),
      });

      const response = await apiRequest<{ events: Event[] }>(`/events?${queryParams}`);

      if (response.success && response.data) {
        setEvents(response.data.events);
      } else {
        Alert.alert('Error', 'Failed to load events');
      }
    } catch (error) {
      console.error('❌ Error loading events:', error);
      Alert.alert('Error', 'Network error while loading events');
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, [filter]);

  useEffect(() => {
    loadEvents();
  }, [loadEvents]);

  const onRefresh = useCallback(() => {
    setRefreshing(true);
    loadEvents();
  }, [loadEvents]);

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const formatTime = (timeString: string) => {
    return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  const getEventTypeColor = (eventType: string) => {
    const colors = {
      meeting: '#2196F3',
      rally: '#FF5722',
      conference: '#9C27B0',
      community_service: '#4CAF50',
      training: '#FF9800',
      other: '#607D8B'
    };
    return colors[eventType] || colors.other;
  };

  const getEventTypeIcon = (eventType: string) => {
    const icons = {
      meeting: '🤝',
      rally: '📢',
      conference: '🎤',
      community_service: '🤲',
      training: '📚',
      other: '📅'
    };
    return icons[eventType] || icons.other;
  };

  const renderEvent = ({ item }: { item: Event }) => {
    const isUpcoming = new Date(item.eventDate) > new Date();
    
    return (
      <TouchableOpacity
        style={styles.eventCard}
        onPress={() => router.push(`/event-detail?id=${item.id}`)}
      >
        <View style={styles.eventHeader}>
          <View style={styles.eventTypeContainer}>
            <Text style={styles.eventTypeIcon}>{getEventTypeIcon(item.eventType)}</Text>
            <Text style={[
              styles.eventType,
              { backgroundColor: getEventTypeColor(item.eventType) }
            ]}>
              {item.eventType.replace('_', ' ').toUpperCase()}
            </Text>
          </View>
          <Text style={[
            styles.eventStatus,
            { color: isUpcoming ? Theme.colors.success : Theme.colors.secondary }
          ]}>
            {isUpcoming ? 'UPCOMING' : 'COMPLETED'}
          </Text>
        </View>

        <Text style={styles.eventTitle} numberOfLines={2}>{item.title}</Text>
        
        <View style={styles.eventDetails}>
          <View style={styles.eventDetailRow}>
            <Text style={styles.eventDetailIcon}>📅</Text>
            <Text style={styles.eventDetailText}>{formatDate(item.eventDate)}</Text>
          </View>
          
          <View style={styles.eventDetailRow}>
            <Text style={styles.eventDetailIcon}>🕐</Text>
            <Text style={styles.eventDetailText}>
              {formatTime(item.startTime)}
              {item.endTime && ` - ${formatTime(item.endTime)}`}
            </Text>
          </View>
          
          <View style={styles.eventDetailRow}>
            <Text style={styles.eventDetailIcon}>📍</Text>
            <Text style={styles.eventDetailText} numberOfLines={1}>{item.location}</Text>
          </View>

          <View style={styles.eventDetailRow}>
            <Text style={styles.eventDetailIcon}>👥</Text>
            <Text style={styles.eventDetailText}>
              {item.attendanceCount} attendees
              {item.maxAttendees && ` / ${item.maxAttendees} max`}
            </Text>
          </View>
        </View>

        {item.description && (
          <Text style={styles.eventDescription} numberOfLines={2}>
            {item.description}
          </Text>
        )}

        <View style={styles.eventFooter}>
          <Text style={styles.eventCreator}>
            Created by {item.creator?.fullName} ({item.creator?.role})
          </Text>
        </View>
      </TouchableOpacity>
    );
  };

  const renderEmptyState = () => (
    <View style={styles.emptyState}>
      <Text style={styles.emptyStateIcon}>📅</Text>
      <Text style={styles.emptyStateTitle}>No {filter} events</Text>
      <Text style={styles.emptyStateText}>
        {filter === 'upcoming' 
          ? 'No upcoming events scheduled' 
          : filter === 'past'
          ? 'No past events to show'
          : 'No events available'
        }
      </Text>
      {isAdmin() && (
        <TouchableOpacity
          style={styles.createEventButton}
          onPress={() => router.push('/create-event')}
        >
          <Text style={styles.createEventButtonText}>Create New Event</Text>
        </TouchableOpacity>
      )}
    </View>
  );

  if (loading && !refreshing) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Events</Text>
          <View style={styles.headerRight} />
        </View>
        
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Theme.colors.primary} />
          <Text style={styles.loadingText}>Loading events...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        <Text style={styles.title}>Events</Text>
        <View style={styles.headerRight}>
          {isAdmin() && (
            <TouchableOpacity
              style={styles.createButton}
              onPress={() => router.push('/create-event')}
            >
              <Text style={styles.createButtonText}>+ Create</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>

      {/* Filter Tabs */}
      <View style={styles.filterContainer}>
        {(['upcoming', 'past', 'all'] as const).map((filterType) => (
          <TouchableOpacity
            key={filterType}
            style={[
              styles.filterTab,
              filter === filterType && styles.activeFilterTab
            ]}
            onPress={() => setFilter(filterType)}
          >
            <Text style={[
              styles.filterTabText,
              filter === filterType && styles.activeFilterTabText
            ]}>
              {filterType.charAt(0).toUpperCase() + filterType.slice(1)}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Events List */}
      <FlatList
        data={events}
        renderItem={renderEvent}
        keyExtractor={(item) => item.id}
        contentContainerStyle={[
          styles.listContainer,
          events.length === 0 && styles.emptyListContainer
        ]}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[Theme.colors.primary]}
          />
        }
        ListEmptyComponent={renderEmptyState}
        showsVerticalScrollIndicator={false}
      />

      {/* Quick Actions for Admin/Organizer */}
      {isOrganizer() && (
        <View style={styles.quickActions}>
          <TouchableOpacity
            style={styles.quickActionButton}
            onPress={() => router.push('/attendance-scanner')}
          >
            <Text style={styles.quickActionIcon}>📱</Text>
            <Text style={styles.quickActionText}>Scan QR</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={styles.quickActionButton}
            onPress={() => router.push('/location-attendance')}
          >
            <Text style={styles.quickActionIcon}>📍</Text>
            <Text style={styles.quickActionText}>Location</Text>
          </TouchableOpacity>
        </View>
      )}

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    minWidth: 60,
  },
  backButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
  },
  title: {
    ...Theme.typography.h4,
    color: Theme.colors.text.onPrimary,
    flex: 1,
    textAlign: 'center',
  },
  headerRight: {
    minWidth: 60,
    alignItems: 'flex-end',
  },
  createButton: {
    backgroundColor: Theme.colors.secondary,
    paddingHorizontal: Theme.spacing.sm,
    paddingVertical: Theme.spacing.xs,
    borderRadius: Theme.borderRadius.sm,
  },
  createButtonText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.onSecondary,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    marginTop: Theme.spacing.md,
  },
  filterContainer: {
    flexDirection: 'row',
    backgroundColor: Theme.colors.surface,
    marginHorizontal: Theme.spacing.lg,
    marginVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.xs,
  },
  filterTab: {
    flex: 1,
    paddingVertical: Theme.spacing.sm,
    alignItems: 'center',
    borderRadius: Theme.borderRadius.md,
  },
  activeFilterTab: {
    backgroundColor: Theme.colors.primary,
  },
  filterTabText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '500',
  },
  activeFilterTabText: {
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  listContainer: {
    paddingHorizontal: Theme.spacing.lg,
    paddingBottom: Theme.spacing.xl,
  },
  emptyListContainer: {
    flexGrow: 1,
  },
  eventCard: {
    backgroundColor: Theme.colors.surface,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
    marginBottom: Theme.spacing.md,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  eventHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: Theme.spacing.sm,
  },
  eventTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  eventTypeIcon: {
    fontSize: 16,
    marginRight: Theme.spacing.xs,
  },
  eventType: {
    ...Theme.typography.caption,
    color: Theme.colors.text.onPrimary,
    paddingHorizontal: Theme.spacing.sm,
    paddingVertical: Theme.spacing.xs,
    borderRadius: Theme.borderRadius.sm,
    fontWeight: '600',
    fontSize: 10,
  },
  eventStatus: {
    ...Theme.typography.caption,
    fontWeight: '600',
    fontSize: 10,
  },
  eventTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
  },
  eventDetails: {
    marginBottom: Theme.spacing.md,
  },
  eventDetailRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Theme.spacing.xs,
  },
  eventDetailIcon: {
    fontSize: 14,
    width: 20,
    marginRight: Theme.spacing.sm,
  },
  eventDetailText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    flex: 1,
  },
  eventDescription: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontStyle: 'italic',
    marginBottom: Theme.spacing.md,
  },
  eventFooter: {
    borderTopWidth: 1,
    borderTopColor: Theme.colors.border,
    paddingTop: Theme.spacing.sm,
  },
  eventCreator: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: Theme.spacing.xl,
  },
  emptyStateIcon: {
    fontSize: 64,
    marginBottom: Theme.spacing.lg,
    opacity: 0.3,
  },
  emptyStateTitle: {
    ...Theme.typography.h3,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.sm,
  },
  emptyStateText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
    marginBottom: Theme.spacing.lg,
  },
  createEventButton: {
    backgroundColor: Theme.colors.secondary,
    paddingHorizontal: Theme.spacing.lg,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
  },
  createEventButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onSecondary,
    fontWeight: '600',
  },
  quickActions: {
    flexDirection: 'row',
    backgroundColor: Theme.colors.surface,
    marginHorizontal: Theme.spacing.lg,
    marginBottom: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.sm,
    gap: Theme.spacing.sm,
  },
  quickActionButton: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
    backgroundColor: Theme.colors.background,
  },
  quickActionIcon: {
    fontSize: 24,
    marginBottom: Theme.spacing.xs,
  },
  quickActionText: {
    ...Theme.typography.caption,
    color: Theme.colors.text.primary,
    fontWeight: '600',
  },
});

# ==== ./mobile-app/app/register.tsx ====

import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  Modal,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import * as ImagePicker from 'expo-image-picker';

export default function Register() {
  const [formData, setFormData] = useState({
    // 🔥 FIXED: Using consistent field names that match backend
    aadharNumber: '',      // Backend expects this spelling
    fullName: '',
    fatherName: '',
    address: '',
    phone: '',
    email: '',
    dateOfBirth: '',
    occupation: '',
    constituency: '',
    gender: '',
    city: '',
    state: '',
    pincode: '',
    password: '',
    confirmPassword: '',
  });

  const [aadharValidated, setAadharValidated] = useState(false);
  const [aadharLoading, setAadharLoading] = useState(false);
  const [useAadharVerification, setUseAadharVerification] = useState(null);
  const [loading, setLoading] = useState(false);
  const [photo, setPhoto] = useState(null);
  const [showCamera, setShowCamera] = useState(false);
  const [showImageOptions, setShowImageOptions] = useState(false);
  const [facing, setFacing] = useState<CameraType>('front');
  const [permission, requestPermission] = useCameraPermissions();
  const camera = useRef(null);

  // Aadhaar validation function
  const validateAadhar = (aadharNumber) => {
    const cleanAadhar = aadharNumber.replace(/[\s-]/g, '');
    
    if (!/^\d{12}$/.test(cleanAadhar)) {
      return false;
    }
    
    // Verhoeff algorithm for Aadhaar validation
    const verhoeffTable = [
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],
      [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],
      [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],
      [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],
      [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],
      [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],
      [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],
      [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],
      [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
    ];
    
    const multiplicationTable = [
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
      [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],
      [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],
      [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],
      [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],
      [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],
      [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],
      [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]
    ];
    
    let checksum = 0;
    const digits = cleanAadhar.split('').map(Number).reverse();
    
    for (let i = 0; i < digits.length; i++) {
      checksum = verhoeffTable[checksum][multiplicationTable[i % 8][digits[i]]];
    }
    
    return checksum === 0;
  };

  // Format Aadhaar number with spaces
  const formatAadhar = (value) => {
    const cleaned = value.replace(/\D/g, '');
    const groups = cleaned.match(/.{1,4}/g);
    return groups ? groups.join(' ') : cleaned;
  };

  // 🔥 FIXED: Handle Aadhaar input with consistent field naming
  const handleAadharChange = async (text) => {
    const formatted = formatAadhar(text);
    setFormData({...formData, aadharNumber: formatted}); // Use consistent field name
    setAadharValidated(false);
    
    const cleanAadhar = text.replace(/[\s-]/g, '');
    
    if (cleanAadhar.length === 12) {
      setAadharLoading(true);
      
      if (validateAadhar(cleanAadhar)) {
        setTimeout(() => {
          // Mock Aadhaar data - in real implementation, this would come from UIDAI API
          const mockAadharData = {
            name: 'Rajesh Kumar Sharma',
            fatherName: 'Ram Bahadur Sharma',
            address: 'House No 123, Ward No 5, Kalimpong, West Bengal - 734301',
            dateOfBirth: '1990-05-15',
            phone: '+91-9876543210'
          };
          
          setFormData(prev => ({
            ...prev,
            fullName: mockAadharData.name,
            fatherName: mockAadharData.fatherName,
            address: mockAadharData.address,
            dateOfBirth: mockAadharData.dateOfBirth,
            phone: mockAadharData.phone
          }));
          
          setAadharValidated(true);
          setAadharLoading(false);
          Alert.alert(
            'Aadhaar Verified!', 
            'Your details have been auto-filled from Aadhaar. Please verify and update if needed.',
            [{ text: 'OK' }]
          );
        }, 2000);
      } else {
        setAadharLoading(false);
        Alert.alert('Invalid Aadhaar', 'Please enter a valid 12-digit Aadhaar number');
      }
    }
  };

  const showImagePickerOptions = () => {
    setShowImageOptions(true);
  };

  const hideImageOptions = () => {
    setShowImageOptions(false);
  };

  const openCamera = async () => {
    hideImageOptions();
    
    if (!permission) {
      return;
    }

    if (!permission.granted) {
      const permissionResponse = await requestPermission();
      if (!permissionResponse.granted) {
        Alert.alert('Permission Required', 'Camera permission is required to take a selfie');
        return;
      }
    }
    
    setShowCamera(true);
  };

  const takePicture = async () => {
    if (camera.current) {
      try {
        const photo = await camera.current.takePictureAsync({
          quality: 0.8,
          skipProcessing: false,
        });
        
        setPhoto(photo);
        setShowCamera(false);
      } catch (error) {
        Alert.alert('Error', 'Failed to take picture: ' + error.message);
      }
    }
  };

  const pickImageFromGallery = async () => {
    hideImageOptions();
    
    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
    if (status !== 'granted') {
      Alert.alert('Permission Required', 'Gallery permission is required to select a photo');
      return;
    }

    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [1, 1],
      quality: 0.8,
    });

    if (!result.canceled) {
      setPhoto(result.assets[0]);
    }
  };

  const removePhoto = () => {
    setPhoto(null);
    hideImageOptions();
  };

  // 🔥 FIXED: Registration function with consistent field names
  const handleRegister = async () => {
    try {
      if (!photo) {
        Alert.alert('Error', 'Please take a selfie or select a profile photo');
        return;
      }

      if (useAadharVerification === true && !aadharValidated) {
        Alert.alert('Error', 'Please enter and validate your Aadhaar number');
        return;
      }

      if (formData.password !== formData.confirmPassword) {
        Alert.alert('Error', 'Passwords do not match');
        return;
      }

      // Validate required fields based on verification method
      const requiredFields = ['fullName', 'fatherName', 'address', 'phone', 'dateOfBirth', 'password'];
      if (useAadharVerification === true) {
        requiredFields.push('aadharNumber');
      }

      const missingFields = requiredFields.filter(field => !formData[field]);
      if (missingFields.length > 0) {
        Alert.alert('Error', 'Please fill in all required fields');
        return;
      }

      // Validate email format if provided
      if (formData.email && formData.email.trim() !== '') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(formData.email)) {
          Alert.alert('Error', 'Please enter a valid email address');
          return;
        }
      }

      // Validate phone number
      const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
      if (!phoneRegex.test(formData.phone.replace(/[\s\-\(\)]/g, ''))) {
        Alert.alert('Error', 'Please enter a valid phone number');
        return;
      }

      setLoading(true);

      console.log('📝 Starting registration with data:', {
        ...formData,
        password: '***',
        confirmPassword: '***',
        aadharNumber: formData.aadharNumber ? formData.aadharNumber.substring(0, 4) + '***' : null
      });

      // 🔥 FIXED: Prepare form data with consistent field names
      const registerFormData = new FormData();
      
      // Add photo
      registerFormData.append('profilePhoto', {
        uri: photo.uri,
        type: 'image/jpeg',
        name: 'profile.jpg',
      } as any);

      // Add form fields (excluding confirmPassword)
      Object.keys(formData).forEach(key => {
        if (key !== 'confirmPassword' && formData[key]) {
          registerFormData.append(key, formData[key]);
        }
      });

      // Add verification method info
      registerFormData.append('verificationMethod', useAadharVerification ? 'aadhaar' : 'manual');
      registerFormData.append('aadharVerified', aadharValidated.toString());

      console.log('🌐 Sending registration request...');

      const response = await fetch('http://192.168.1.65:5000/api/auth/register', {
        method: 'POST',
        body: registerFormData,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      const data = await response.json();

      if (response.ok) {
        console.log('✅ Registration successful');
        Alert.alert(
          'Registration Successful!',
          'Welcome to Gorkha Janshakti Front! You can now login with your credentials.',
          [{ text: 'OK', onPress: () => router.replace('/login') }]
        );
      } else {
        console.log('❌ Registration failed:', data);
        Alert.alert('Registration Failed', data.message || 'Please try again');
      }
    } catch (error) {
      console.error('❌ Registration error:', error);
      Alert.alert('Error', 'Registration failed: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Camera permission check
  if (!permission) {
    return <View />;
  }

  // Render camera view
  if (showCamera) {
    return (
      <View style={styles.cameraContainer}>
        <CameraView
          ref={camera}
          style={styles.camera}
          facing={facing}
        >
          <View style={styles.cameraControls}>
            <TouchableOpacity
              style={styles.cameraButton}
              onPress={() => setShowCamera(false)}
            >
              <Ionicons name="close" size={30} color="white" />
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.captureButton}
              onPress={takePicture}
            >
              <View style={styles.captureButtonInner} />
            </TouchableOpacity>
          </View>
        </CameraView>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="light" />
      
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Ionicons name="arrow-back" size={24} color="white" />
        </TouchableOpacity>
        
        <View style={styles.logoSection}>
          <Text style={styles.partyName}>GORKHA JANSHAKTI FRONT</Text>
          <Text style={styles.title}>Register</Text>
        </View>
      </View>

      <ScrollView style={styles.formContainer} showsVerticalScrollIndicator={false}>
        {/* Photo Section */}
        <View style={styles.photoSection}>
          <TouchableOpacity onPress={showImagePickerOptions} style={styles.photoContainer}>
            {photo ? (
              <Image source={{ uri: photo.uri }} style={styles.photo} />
            ) : (
              <View style={styles.placeholderPhoto}>
                <Ionicons name="camera" size={40} color="#999" />
                <Text style={styles.photoButtonText}>Take Selfie or{'\n'}Select Photo</Text>
              </View>
            )}
          </TouchableOpacity>
          
          {photo && (
            <TouchableOpacity 
              style={styles.changePhotoButton}
              onPress={showImagePickerOptions}
            >
              <Text style={styles.changePhotoText}>Change Photo</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* Verification Method Selection */}
        {useAadharVerification === null && (
          <View style={styles.verificationMethodSection}>
            <Text style={styles.sectionTitle}>Choose Registration Method</Text>
            <Text style={styles.sectionDescription}>
              You can either verify using your Aadhaar card for quick auto-fill, or fill the details manually.
            </Text>
            
            <TouchableOpacity
              style={styles.methodButton}
              onPress={() => setUseAadharVerification(true)}
            >
              <View style={styles.methodButtonContent}>
                <Ionicons name="card" size={24} color="#2D5016" />
                <View style={styles.methodButtonText}>
                  <Text style={styles.methodButtonTitle}>Use Aadhaar Verification</Text>
                  <Text style={styles.methodButtonSubtitle}>Auto-fill details from Aadhaar</Text>
                </View>
                <Ionicons name="chevron-forward" size={20} color="#666" />
              </View>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.methodButton}
              onPress={() => setUseAadharVerification(false)}
            >
              <View style={styles.methodButtonContent}>
                <Ionicons name="create" size={24} color="#2D5016" />
                <View style={styles.methodButtonText}>
                  <Text style={styles.methodButtonTitle}>Fill Details Manually</Text>
                  <Text style={styles.methodButtonSubtitle}>Enter all details yourself</Text>
                </View>
                <Ionicons name="chevron-forward" size={20} color="#666" />
              </View>
            </TouchableOpacity>
          </View>
        )}

        {/* Form Fields */}
        {useAadharVerification !== null && (
          <View style={styles.form}>
            {/* Method Selection Header */}
            <View style={styles.selectedMethodHeader}>
              <View style={styles.selectedMethodInfo}>
                <Ionicons 
                  name={useAadharVerification ? "card" : "create"} 
                  size={20} 
                  color="#2D5016" 
                />
                <Text style={styles.selectedMethodText}>
                  {useAadharVerification ? 'Aadhaar Verification' : 'Manual Entry'}
                </Text>
              </View>
              <TouchableOpacity
                style={styles.changeMethodButton}
                onPress={() => {
                  setUseAadharVerification(null);
                  setAadharValidated(false);
                  setFormData({
                    aadharNumber: '',
                    fullName: '',
                    fatherName: '',
                    address: '',
                    phone: '',
                    email: '',
                    dateOfBirth: '',
                    occupation: '',
                    constituency: '',
                    gender: '',
                    city: '',
                    state: '',
                    pincode: '',
                    password: '',
                    confirmPassword: '',
                  });
                }}
              >
                <Text style={styles.changeMethodText}>Change Method</Text>
              </TouchableOpacity>
            </View>

            {/* 🔥 FIXED: Aadhaar Number Field with consistent naming */}
            {useAadharVerification && (
              <View style={styles.aadharContainer}>
                <View style={styles.aadharInputContainer}>
                  <TextInput
                    style={[
                      styles.input, 
                      styles.aadharInput,
                      aadharValidated && styles.validatedInput
                    ]}
                    placeholder="Aadhaar Number (XXXX XXXX XXXX) *"
                    placeholderTextColor="#999"
                    value={formData.aadharNumber}
                    onChangeText={handleAadharChange}
                    keyboardType="numeric"
                    maxLength={14} // 12 digits + 2 spaces
                  />
                  {aadharLoading && (
                    <View style={styles.aadharLoader}>
                      <Text style={styles.loaderText}>Verifying...</Text>
                    </View>
                  )}
                  {aadharValidated && (
                    <View style={styles.aadharSuccess}>
                      <Ionicons name="checkmark-circle" size={20} color="#4CAF50" />
                      <Text style={styles.successText}>Verified</Text>
                    </View>
                  )}
                </View>
                {aadharValidated && (
                  <Text style={styles.aadharNote}>
                    ✓ Details auto-filled from Aadhaar. Please verify and update if needed.
                  </Text>
                )}
              </View>
            )}

            {/* Personal Details */}
            <TextInput
              style={[styles.input, aadharValidated && styles.autoFilledInput]}
              placeholder="Full Name *"
              placeholderTextColor="#999"
              value={formData.fullName}
              onChangeText={(text) => setFormData({...formData, fullName: text})}
              editable={true}
            />

            <TextInput
              style={[styles.input, aadharValidated && styles.autoFilledInput]}
              placeholder="Father's Name *"
              placeholderTextColor="#999"
              value={formData.fatherName}
              onChangeText={(text) => setFormData({...formData, fatherName: text})}
              editable={true}
            />

            <TextInput
              style={[styles.input, aadharValidated && styles.autoFilledInput]}
              placeholder="Address *"
              placeholderTextColor="#999"
              multiline
              numberOfLines={3}
              textAlignVertical="top"
              value={formData.address}
              onChangeText={(text) => setFormData({...formData, address: text})}
              editable={true}
            />

            <TextInput
              style={[styles.input, aadharValidated && styles.autoFilledInput]}
              placeholder="Phone Number *"
              placeholderTextColor="#999"
              keyboardType="phone-pad"
              value={formData.phone}
              onChangeText={(text) => setFormData({...formData, phone: text})}
              editable={true}
            />

            <TextInput
              style={styles.input}
              placeholder="Email"
              placeholderTextColor="#999"
              keyboardType="email-address"
              autoCapitalize="none"
              value={formData.email}
              onChangeText={(text) => setFormData({...formData, email: text})}
            />

            <TextInput
              style={[styles.input, aadharValidated && styles.autoFilledInput]}
              placeholder="Date of Birth (YYYY-MM-DD) *"
              placeholderTextColor="#999"
              value={formData.dateOfBirth}
              onChangeText={(text) => setFormData({...formData, dateOfBirth: text})}
              editable={true}
            />

            <TextInput
              style={styles.input}
              placeholder="Gender"
              placeholderTextColor="#999"
              value={formData.gender}
              onChangeText={(text) => setFormData({...formData, gender: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="Occupation"
              placeholderTextColor="#999"
              value={formData.occupation}
              onChangeText={(text) => setFormData({...formData, occupation: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="City"
              placeholderTextColor="#999"
              value={formData.city}
              onChangeText={(text) => setFormData({...formData, city: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="State"
              placeholderTextColor="#999"
              value={formData.state}
              onChangeText={(text) => setFormData({...formData, state: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="Pincode"
              placeholderTextColor="#999"
              keyboardType="numeric"
              value={formData.pincode}
              onChangeText={(text) => setFormData({...formData, pincode: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="Constituency"
              placeholderTextColor="#999"
              value={formData.constituency}
              onChangeText={(text) => setFormData({...formData, constituency: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="Password *"
              placeholderTextColor="#999"
              secureTextEntry
              value={formData.password}
              onChangeText={(text) => setFormData({...formData, password: text})}
            />

            <TextInput
              style={styles.input}
              placeholder="Confirm Password *"
              placeholderTextColor="#999"
              secureTextEntry
              value={formData.confirmPassword}
              onChangeText={(text) => setFormData({...formData, confirmPassword: text})}
            />

            <TouchableOpacity
              style={[styles.registerButton, loading && styles.disabledButton]}
              onPress={handleRegister}
              disabled={loading}
            >
              <Text style={styles.registerButtonText}>
                {loading ? 'Registering...' : 'Register'}
              </Text>
            </TouchableOpacity>

            <View style={styles.loginLink}>
              <Text style={styles.loginLinkText}>
                Already have an account?{' '}
                <Text
                  style={styles.loginLinkHighlight}
                  onPress={() => router.replace('/login')}
                >
                  Login here
                </Text>
              </Text>
            </View>
          </View>
        )}
      </ScrollView>

      {/* Image Picker Modal */}
      <Modal
        visible={showImageOptions}
        transparent={true}
        animationType="slide"
        onRequestClose={hideImageOptions}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.imageOptionsModal}>
            <Text style={styles.modalTitle}>Select Profile Photo</Text>
            
            <TouchableOpacity style={styles.modalOption} onPress={openCamera}>
              <Ionicons name="camera" size={24} color="#2D5016" />
              <Text style={styles.modalOptionText}>Take Photo</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={styles.modalOption} onPress={pickImageFromGallery}>
              <Ionicons name="images" size={24} color="#2D5016" />
              <Text style={styles.modalOptionText}>Choose from Gallery</Text>
            </TouchableOpacity>
            
            {photo && (
              <TouchableOpacity style={[styles.modalOption, styles.removeOption]} onPress={removePhoto}>
                <Ionicons name="trash" size={24} color="#DC3545" />
                <Text style={[styles.modalOptionText, styles.removeOptionText]}>Remove Photo</Text>
              </TouchableOpacity>
            )}
            
            <TouchableOpacity style={styles.modalCancel} onPress={hideImageOptions}>
              <Text style={styles.modalCancelText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1B2951',
  },
  header: {
    paddingTop: 20,
    paddingHorizontal: 20,
    paddingBottom: 30,
  },
  backButton: {
    marginBottom: 20,
  },
  logoSection: {
    alignItems: 'center',
  },
  partyName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 10,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
  },
  formContainer: {
    flex: 1,
    backgroundColor: 'white',
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
  },
  photoSection: {
    alignItems: 'center',
    paddingTop: 30,
    paddingBottom: 20,
  },
  photoContainer: {
    width: 120,
    height: 120,
    borderRadius: 60,
    overflow: 'hidden',
    marginBottom: 10,
  },
  photo: {
    width: '100%',
    height: '100%',
  },
  placeholderPhoto: {
    width: '100%',
    height: '100%',
    backgroundColor: '#F0F0F0',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#E0E0E0',
    borderStyle: 'dashed',
  },
  photoButtonText: {
    color: '#999',
    fontSize: 12,
    textAlign: 'center',
    marginTop: 8,
  },
  changePhotoButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    backgroundColor: '#F8F9FA',
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  changePhotoText: {
    color: '#2D5016',
    fontSize: 14,
    fontWeight: '500',
  },
  verificationMethodSection: {
    paddingHorizontal: 30,
    paddingVertical: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  sectionDescription: {
    fontSize: 16,
    color: '#666',
    marginBottom: 25,
    lineHeight: 22,
  },
  methodButton: {
    backgroundColor: 'white',
    borderRadius: 12,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  methodButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
  },
  methodButtonText: {
    flex: 1,
    marginLeft: 15,
  },
  methodButtonTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  methodButtonSubtitle: {
    fontSize: 14,
    color: '#666',
  },
  selectedMethodHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    paddingHorizontal: 20,
    backgroundColor: '#F8F9FA',
    borderRadius: 10,
    marginBottom: 20,
  },
  selectedMethodInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  selectedMethodText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2D5016',
    marginLeft: 8,
  },
  changeMethodButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    backgroundColor: 'white',
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#2D5016',
  },
  changeMethodText: {
    color: '#2D5016',
    fontSize: 12,
    fontWeight: '500',
  },
  form: {
    paddingHorizontal: 30,
    paddingBottom: 40,
  },
  aadhaarContainer: {
    marginBottom: 20,
  },
  aadhaarInputContainer: {
    position: 'relative',
  },
  input: {
    backgroundColor: 'white',
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderRadius: 8,
    marginBottom: 20,
    fontSize: 16,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  aadhaarInput: {
    paddingRight: 80,
  },
  validatedInput: {
    borderColor: '#4CAF50',
    backgroundColor: '#F8FFF8',
  },
  autoFilledInput: {
    backgroundColor: '#F0F8FF',
    borderColor: '#4CAF50',
  },
  aadhaarLoader: {
    position: 'absolute',
    right: 15,
    top: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  loaderText: {
    color: '#666',
    fontSize: 12,
    marginRight: 5,
  },
  aadhaarSuccess: {
    position: 'absolute',
    right: 15,
    top: 12,
    flexDirection: 'row',
    alignItems: 'center',
  },
  successText: {
    color: '#4CAF50',
    fontSize: 12,
    marginLeft: 5,
    fontWeight: '600',
  },
  aadhaarNote: {
    color: '#4CAF50',
    fontSize: 12,
    fontStyle: 'italic',
    marginTop: -15,
    marginBottom: 15,
    paddingLeft: 5,
  },
  registerButton: {
    backgroundColor: '#2D5016',
    paddingVertical: 15,
    borderRadius: 8,
    marginTop: 20,
  },
  registerButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  disabledButton: {
    backgroundColor: '#999',
  },
  loginLink: {
    alignItems: 'center',
    marginTop: 20,
  },
  loginLinkText: {
    color: '#666',
    fontSize: 16,
  },
  loginLinkHighlight: {
    color: '#2D5016',
    fontWeight: 'bold',
  },
  // Camera styles
  cameraContainer: {
    flex: 1,
    backgroundColor: 'black',
  },
  camera: {
    flex: 1,
  },
  cameraControls: {
    position: 'absolute',
    bottom: 40,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
  },
  cameraButton: {
    padding: 20,
  },
  captureButton: {
    width: 70,
    height: 70,
    borderRadius: 35,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
  },
  captureButtonInner: {
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: '#2D5016',
  },
  // Modal styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  imageOptionsModal: {
    backgroundColor: 'white',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingVertical: 20,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: '#333',
  },
  modalOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  modalOptionText: {
    fontSize: 16,
    marginLeft: 15,
    color: '#333',
  },
  removeOption: {
    borderBottomColor: '#FFE6E6',
  },
  removeOptionText: {
    color: '#DC3545',
  },
  modalCancel: {
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 10,
  },
  modalCancelText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '600',
  },
});

# ==== ./mobile-app/app/members.tsx ====

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function Members() {
  const [members, setMembers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadMembers();
  }, []);

  const loadMembers = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const response = await fetch('http://192.168.1.65:5000/api/members/all', {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Members data structure:', data[0]); // Log first item to see structure
        setMembers(data);
      } else {
        Alert.alert('Error', 'Failed to load members');
      }
    } catch (error) {
      console.error('Load members error:', error);
      Alert.alert('Error', 'Network error');
    } finally {
      setLoading(false);
    }
  };

  const renderMember = ({ item }) => (
    <View style={styles.memberCard}>
      <View style={styles.memberHeader}>
        <View style={styles.avatar}>
          <Text style={styles.avatarText}>
            {item.personalInfo.fullName.charAt(0).toUpperCase()}
          </Text>
        </View>
        <View style={styles.memberInfo}>
          <Text style={styles.memberName}>{item.personalInfo.fullName}</Text>
          <Text style={styles.memberId}>ID: {item.membershipId}</Text>
          <Text style={styles.memberEmail}>{item.personalInfo.email}</Text>
        </View>
      </View>

      <View style={styles.memberMeta}>
        <View style={styles.roleContainer}>
          <Text style={[
            styles.memberRole,
            { 
              backgroundColor: item.role === 'admin' ? '#FF5722' : 
                              item.role === 'organizer' ? '#2196F3' : '#4CAF50',
              color: 'white'
            }
          ]}>
            {item.role?.toUpperCase() || 'MEMBER'}
          </Text>
        </View>
        <Text style={styles.joinDate}>
          Joined {new Date(item.createdAt).toLocaleDateString()}
        </Text>
      </View>
    </View>
  );
   

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Loading...</Text>
        </View>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2D5016" />
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        <Text style={styles.title}>All Members</Text>
      </View>

      <View style={styles.statsHeader}>
        <Text style={styles.memberCount}>
          {members.length} Total Members
        </Text>
      </View>

      <FlatList
        data={members}
        renderItem={renderMember}
        keyExtractor={(item) => item.id?.toString() || item._id?.toString()}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
      />

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#1B2951',
    paddingVertical: 15,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    marginRight: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
  },
  title: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  statsHeader: {
    backgroundColor: 'white',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  memberCount: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  listContainer: {
    paddingVertical: 10,
  },
  memberCard: {
    backgroundColor: 'white',
    marginHorizontal: 15,
    marginVertical: 5,
    borderRadius: 12,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  memberHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  avatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#2D5016',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  avatarText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
  },
  memberInfo: {
    flex: 1,
  },
  memberName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 2,
  },
  memberId: {
    fontSize: 14,
    color: '#2D5016',
    fontWeight: '600',
    marginBottom: 2,
  },
  memberEmail: {
    fontSize: 14,
    color: '#666',
  },
  memberMeta: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
    paddingTop: 10,
  },
  roleContainer: {
    alignItems: 'flex-start',
  },
  memberRole: {
    fontSize: 12,
    fontWeight: 'bold',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  joinDate: {
    fontSize: 12,
    color: '#999',
  },
});

# ==== ./mobile-app/app/scanner.tsx ====

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  Modal,
  ActivityIndicator,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { CameraView, Camera } from "expo-camera";
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function QRScanner() {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [memberData, setMemberData] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [scanning, setScanning] = useState(true);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
  }, []);

  const handleBarCodeScanned = async ({ type, data }) => {
    if (scanned || loading) return; // Prevent multiple scans
    
    setScanned(true);
    setScanning(false);
    setLoading(true);
    
    try {
      console.log('QR Code scanned:', data);
      
      // Parse QR data
      let qrData;
      try {
        qrData = JSON.parse(data);
      } catch (parseError) {
        // If it's not JSON, treat it as membership ID
        qrData = { membershipId: data };
      }

      console.log('Parsed QR data:', qrData);

      const token = await AsyncStorage.getItem('token');
      
      // FIXED: Use correct API endpoint and handle network issues
      const response = await fetch('http://192.168.1.65:5000/api/members/scan', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          qrData: typeof qrData === 'string' ? qrData : JSON.stringify(qrData),
          membershipId: qrData.membershipId || data 
        }),
        // Add timeout to prevent hanging requests
        timeout: 10000,
      });

      console.log('API Response status:', response.status);

      const result = await response.json();
      console.log('API Response data:', result);

      if (response.ok && (result.member || result.success)) {
        const member = result.member || result.data;
        setMemberData(member);
        setModalVisible(true);
      } else {
        Alert.alert(
          'Member Not Found', 
          result.message || 'Invalid QR code or member not found',
          [{ text: 'OK', onPress: resetScanner }]
        );
      }
    } catch (error) {
      console.error('Scan error:', error);
      
      let errorMessage = 'Failed to verify member';
      
      if (error.message === 'Network request failed') {
        errorMessage = 'Cannot connect to server. Please check:\n• Internet connection\n• Server is running\n• Correct server address';
      } else if (error.name === 'AbortError') {
        errorMessage = 'Request timed out. Please try again.';
      }

      Alert.alert(
        'Scan Error', 
        errorMessage,
        [{ text: 'Try Again', onPress: resetScanner }]
      );
    } finally {
      setLoading(false);
    }
  };

  const resetScanner = () => {
    setScanned(false);
    setScanning(true);
    setMemberData(null);
    setModalVisible(false);
    setLoading(false);
  };

  const verifyMember = () => {
    Alert.alert(
      'Member Verified',
      `${memberData?.name || memberData?.fullName} has been verified successfully.`,
      [{ text: 'OK', onPress: resetScanner }]
    );
  };

  if (hasPermission === null) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.messageContainer}>
          <ActivityIndicator size="large" color="#2D5016" />
          <Text style={styles.message}>Requesting camera permission...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (hasPermission === false) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.messageContainer}>
          <Text style={styles.message}>Camera permission denied</Text>
          <Text style={styles.subMessage}>Please enable camera access in settings to scan QR codes</Text>
          <TouchableOpacity style={styles.button} onPress={() => router.back()}>
            <Text style={styles.buttonText}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <View style={styles.container}>
      {/* FIXED: Header with absolute positioning */}
      <View style={styles.headerOverlay}>
        <SafeAreaView>
          <View style={styles.header}>
            <TouchableOpacity
              style={styles.backButton}
              onPress={() => router.back()}
            >
              <Text style={styles.backButtonText}>← Back</Text>
            </TouchableOpacity>
            <Text style={styles.title}>QR Scanner</Text>
            <View style={styles.placeholder} />
          </View>
        </SafeAreaView>
      </View>

      {/* FIXED: Camera with proper absolute positioning */}
      {scanning && (
        <CameraView
          style={styles.camera}
          onBarcodeScanned={scanned ? undefined : handleBarCodeScanned}
          barcodeScannerSettings={{
            barcodeTypes: ["qr", "pdf417"],
          }}
        >
          {/* FIXED: Overlay with absolute positioning */}
          <View style={styles.overlay}>
            <View style={styles.scanFrame} />
            <Text style={styles.scanText}>
              Point camera at member's QR code
            </Text>
          </View>
        </CameraView>
      )}

      {/* Loading state */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#2D5016" />
          <Text style={styles.loadingText}>Verifying member...</Text>
        </View>
      )}

      {/* Processing state */}
      {!scanning && !modalVisible && !loading && (
        <View style={styles.messageContainer}>
          <Text style={styles.message}>Processing QR code...</Text>
          <TouchableOpacity style={styles.resetButton} onPress={resetScanner}>
            <Text style={styles.resetButtonText}>Scan Again</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* FIXED: Member Info Modal */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Member Verification</Text>
            
            {memberData && (
              <View style={styles.memberInfo}>
                <View style={styles.memberDetails}>
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Name:</Text>
                    <Text style={styles.detailValue}>
                      {memberData.name || memberData.fullName || 'N/A'}
                    </Text>
                  </View>
                  
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Membership ID:</Text>
                    <Text style={styles.detailValue}>
                      {memberData.membershipId || 'N/A'}
                    </Text>
                  </View>
                  
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Email:</Text>
                    <Text style={styles.detailValue}>
                      {memberData.email || 'N/A'}
                    </Text>
                  </View>
                  
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Phone:</Text>
                    <Text style={styles.detailValue}>
                      {memberData.phone || 'N/A'}
                    </Text>
                  </View>
                  
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Role:</Text>
                    <Text style={[styles.detailValue, styles.roleText]}>
                      {(memberData.role || 'member').toUpperCase()}
                    </Text>
                  </View>
                  
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Status:</Text>
                    <Text style={[
                      styles.detailValue, 
                      memberData.isActive ? styles.activeText : styles.inactiveText
                    ]}>
                      {memberData.isActive ? 'ACTIVE' : 'INACTIVE'}
                    </Text>
                  </View>
                  
                  {memberData.createdAt && (
                    <View style={styles.detailRow}>
                      <Text style={styles.detailLabel}>Member Since:</Text>
                      <Text style={styles.detailValue}>
                        {new Date(memberData.createdAt).toLocaleDateString()}
                      </Text>
                    </View>
                  )}
                </View>

                <View style={styles.verificationStatus}>
                  <Text style={styles.verifiedText}>✅ VERIFIED MEMBER</Text>
                </View>
              </View>
            )}

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.verifyButton}
                onPress={verifyMember}
              >
                <Text style={styles.verifyButtonText}>Mark as Verified</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.scanAgainButton}
                onPress={resetScanner}
              >
                <Text style={styles.scanAgainButtonText}>Scan Another</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
      
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  // FIXED: Header with proper absolute positioning
  headerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 1000,
    backgroundColor: 'rgba(27, 41, 81, 0.9)',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 15,
  },
  placeholder: {
    width: 60, // Same as backButton for centering
  },
  backButton: {
    padding: 5,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  title: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
    textAlign: 'center',
  },
  // FIXED: Camera with absolute positioning
  camera: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  // FIXED: Overlay with proper positioning
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  scanFrame: {
    width: 250,
    height: 250,
    borderWidth: 3,
    borderColor: '#2D5016',
    backgroundColor: 'transparent',
    borderRadius: 20,
  },
  scanText: {
    color: 'white',
    fontSize: 16,
    marginTop: 30,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
    overflow: 'hidden',
  },
  messageContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
    backgroundColor: '#000',
  },
  message: {
    fontSize: 18,
    color: 'white',
    textAlign: 'center',
    marginBottom: 10,
  },
  subMessage: {
    fontSize: 14,
    color: '#ccc',
    textAlign: 'center',
    marginBottom: 30,
  },
  button: {
    backgroundColor: '#2D5016',
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 8,
    alignSelf: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  resetButton: {
    backgroundColor: '#2D5016',
    paddingVertical: 12,
    paddingHorizontal: 25,
    borderRadius: 8,
    marginTop: 20,
  },
  resetButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 999,
  },
  loadingText: {
    color: 'white',
    fontSize: 16,
    marginTop: 15,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.5)',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 25,
    width: '90%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
    color: '#1B2951',
  },
  memberInfo: {
    marginBottom: 25,
  },
  memberDetails: {
    backgroundColor: '#f8f9fa',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  detailLabel: {
    fontWeight: '600',
    color: '#495057',
    flex: 1,
  },
  detailValue: {
    color: '#212529',
    flex: 2,
    textAlign: 'right',
  },
  roleText: {
    fontWeight: 'bold',
    color: '#2D5016',
  },
  activeText: {
    color: '#28a745',
    fontWeight: 'bold',
  },
  inactiveText: {
    color: '#dc3545',
    fontWeight: 'bold',
  },
  verificationStatus: {
    backgroundColor: '#d4edda',
    borderColor: '#c3e6cb',
    borderWidth: 1,
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  verifiedText: {
    color: '#155724',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 15,
  },
  verifyButton: {
    backgroundColor: '#28a745',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    flex: 1,
  },
  verifyButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  scanAgainButton: {
    backgroundColor: '#2D5016',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    flex: 1,
  },
  scanAgainButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

# ==== ./mobile-app/app/_layout.tsx ====

// mobile-app/app/_layout.tsx - UPDATED with Events routes
import { Stack } from 'expo-router';
import { AuthProvider } from '../contexts/AuthContext';

export default function RootLayout() {
  return (
    <AuthProvider>
      <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="index" />
        <Stack.Screen name="register" />
        <Stack.Screen name="login" />
        <Stack.Screen name="dashboard" />
        <Stack.Screen name="admin" />
        <Stack.Screen name="scanner" />
        <Stack.Screen name="members" />
        <Stack.Screen name="roles" />
        <Stack.Screen name="profile-edit" />
        
        {/* NEW: Events-related screens */}
        <Stack.Screen name="events" />
        <Stack.Screen name="create-event" />
        <Stack.Screen name="event-detail" />
        <Stack.Screen name="attendance-scanner" />
        <Stack.Screen name="location-attendance" />
      </Stack>
    </AuthProvider>
  );
}

# ==== ./mobile-app/app/create-event.tsx ====

// mobile-app/app/create-event.tsx
import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import { apiRequest } from '../utils/apiUtils';

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
    },
    border: '#e0e0e0',
    error: '#F44336',
    success: '#4CAF50',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
  },
  typography: {
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
  },
};

const EVENT_TYPES = [
  { key: 'meeting', label: 'Meeting', icon: '🤝' },
  { key: 'rally', label: 'Rally', icon: '📢' },
  { key: 'conference', label: 'Conference', icon: '🎤' },
  { key: 'community_service', label: 'Community Service', icon: '🤲' },
  { key: 'training', label: 'Training', icon: '📚' },
  { key: 'other', label: 'Other', icon: '📅' },
];

const LOCATIONS = [
  'Central Party Office',
  'Party Office Darjeeling',
  'Party Office Kalimpong',
  'Party Office Kurseong',
  'Custom Location'
];

export default function CreateEventScreen() {
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    eventDate: '',
    startTime: '',
    endTime: '',
    location: '',
    customLocation: '',
    address: '',
    eventType: 'meeting',
    maxAttendees: '',
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Check if user is admin
  if (user?.role !== 'admin') {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Create Event</Text>
        </View>
        <View style={styles.accessDenied}>
          <Text style={styles.accessDeniedText}>Access Denied</Text>
          <Text style={styles.accessDeniedSubtext}>Only admins can create events</Text>
        </View>
      </SafeAreaView>
    );
  }

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = 'Event title is required';
    }

    if (!formData.eventDate) {
      newErrors.eventDate = 'Event date is required';
    } else {
      const eventDate = new Date(formData.eventDate);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (eventDate < today) {
        newErrors.eventDate = 'Event date cannot be in the past';
      }
    }

    if (!formData.startTime) {
      newErrors.startTime = 'Start time is required';
    }

    if (!formData.location) {
      newErrors.location = 'Location is required';
    }

    if (formData.location === 'Custom Location' && !formData.customLocation.trim()) {
      newErrors.customLocation = 'Custom location is required';
    }

    if (formData.endTime && formData.startTime) {
      const startTime = new Date(`2000-01-01T${formData.startTime}`);
      const endTime = new Date(`2000-01-01T${formData.endTime}`);
      if (endTime <= startTime) {
        newErrors.endTime = 'End time must be after start time';
      }
    }

    if (formData.maxAttendees && isNaN(parseInt(formData.maxAttendees))) {
      newErrors.maxAttendees = 'Max attendees must be a number';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      Alert.alert('Validation Error', 'Please correct the highlighted fields');
      return;
    }

    setLoading(true);

    try {
      const eventData = {
        title: formData.title.trim(),
        description: formData.description.trim(),
        eventDate: formData.eventDate,
        startTime: formData.startTime,
        endTime: formData.endTime || null,
        location: formData.location === 'Custom Location' ? formData.customLocation.trim() : formData.location,
        address: formData.address.trim(),
        eventType: formData.eventType,
        maxAttendees: formData.maxAttendees ? parseInt(formData.maxAttendees) : null,
      };

      console.log('📝 Creating event:', eventData);

      const response = await apiRequest('/events', {
        method: 'POST',
        body: JSON.stringify(eventData),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.success) {
        Alert.alert(
          'Success!',
          'Event created successfully',
          [
            {
              text: 'OK',
              onPress: () => router.back()
            }
          ]
        );
      } else {
        Alert.alert('Error', response.error || 'Failed to create event');
      }
    } catch (error) {
      console.error('❌ Error creating event:', error);
      Alert.alert('Error', 'Network error while creating event');
    } finally {
      setLoading(false);
    }
  };

  const formatDateForInput = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toISOString().split('T')[0];
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        {/* Header */}
        <View style={styles.header}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => router.back()}
          >
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Create Event</Text>
          <TouchableOpacity
            style={[styles.submitButton, loading && styles.disabledButton]}
            onPress={handleSubmit}
            disabled={loading}
          >
            <Text style={styles.submitButtonText}>
              {loading ? 'Creating...' : 'Create'}
            </Text>
          </TouchableOpacity>
        </View>

        <ScrollView 
          style={styles.scrollView}
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
        >
          {/* Basic Information */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Basic Information</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Event Title *</Text>
              <TextInput
                style={[styles.input, errors.title && styles.errorInput]}
                value={formData.title}
                onChangeText={(value) => handleInputChange('title', value)}
                placeholder="Enter event title"
                editable={!loading}
              />
              {errors.title && <Text style={styles.errorText}>{errors.title}</Text>}
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>Description</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={formData.description}
                onChangeText={(value) => handleInputChange('description', value)}
                placeholder="Enter event description"
                multiline
                numberOfLines={3}
                textAlignVertical="top"
                editable={!loading}
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.label}>Event Type *</Text>
              <View style={styles.eventTypeContainer}>
                {EVENT_TYPES.map((type) => (
                  <TouchableOpacity
                    key={type.key}
                    style={[
                      styles.eventTypeButton,
                      formData.eventType === type.key && styles.selectedEventType
                    ]}
                    onPress={() => handleInputChange('eventType', type.key)}
                    disabled={loading}
                  >
                    <Text style={styles.eventTypeIcon}>{type.icon}</Text>
                    <Text style={[
                      styles.eventTypeText,
                      formData.eventType === type.key && styles.selectedEventTypeText
                    ]}>
                      {type.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </View>

          {/* Date and Time */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Date & Time</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Event Date *</Text>
              <TextInput
                style={[styles.input, errors.eventDate && styles.errorInput]}
                value={formData.eventDate}
                onChangeText={(value) => handleInputChange('eventDate', value)}
                placeholder="YYYY-MM-DD"
                editable={!loading}
              />
              {errors.eventDate && <Text style={styles.errorText}>{errors.eventDate}</Text>}
            </View>

            <View style={styles.inputRow}>
              <View style={[styles.inputGroup, { flex: 1, marginRight: 8 }]}>
                <Text style={styles.label}>Start Time *</Text>
                <TextInput
                  style={[styles.input, errors.startTime && styles.errorInput]}
                  value={formData.startTime}
                  onChangeText={(value) => handleInputChange('startTime', value)}
                  placeholder="HH:MM (24h)"
                  editable={!loading}
                />
                {errors.startTime && <Text style={styles.errorText}>{errors.startTime}</Text>}
              </View>

              <View style={[styles.inputGroup, { flex: 1, marginLeft: 8 }]}>
                <Text style={styles.label}>End Time</Text>
                <TextInput
                  style={[styles.input, errors.endTime && styles.errorInput]}
                  value={formData.endTime}
                  onChangeText={(value) => handleInputChange('endTime', value)}
                  placeholder="HH:MM (24h)"
                  editable={!loading}
                />
                {errors.endTime && <Text style={styles.errorText}>{errors.endTime}</Text>}
              </View>
            </View>
          </View>

          {/* Location */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Location</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Select Location *</Text>
              <View style={styles.locationContainer}>
                {LOCATIONS.map((location) => (
                  <TouchableOpacity
                    key={location}
                    style={[
                      styles.locationButton,
                      formData.location === location && styles.selectedLocation
                    ]}
                    onPress={() => handleInputChange('location', location)}
                    disabled={loading}
                  >
                    <Text style={[
                      styles.locationText,
                      formData.location === location && styles.selectedLocationText
                    ]}>
                      {location}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              {errors.location && <Text style={styles.errorText}>{errors.location}</Text>}
            </View>

            {formData.location === 'Custom Location' && (
              <View style={styles.inputGroup}>
                <Text style={styles.label}>Custom Location *</Text>
                <TextInput
                  style={[styles.input, errors.customLocation && styles.errorInput]}
                  value={formData.customLocation}
                  onChangeText={(value) => handleInputChange('customLocation', value)}
                  placeholder="Enter custom location"
                  editable={!loading}
                />
                {errors.customLocation && <Text style={styles.errorText}>{errors.customLocation}</Text>}
              </View>
            )}

            <View style={styles.inputGroup}>
              <Text style={styles.label}>Address</Text>
              <TextInput
                style={[styles.input, styles.textArea]}
                value={formData.address}
                onChangeText={(value) => handleInputChange('address', value)}
                placeholder="Enter full address (optional)"
                multiline
                numberOfLines={2}
                textAlignVertical="top"
                editable={!loading}
              />
            </View>
          </View>

          {/* Additional Settings */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Additional Settings</Text>
            
            <View style={styles.inputGroup}>
              <Text style={styles.label}>Maximum Attendees</Text>
              <TextInput
                style={[styles.input, errors.maxAttendees && styles.errorInput]}
                value={formData.maxAttendees}
                onChangeText={(value) => handleInputChange('maxAttendees', value)}
                placeholder="Leave empty for unlimited"
                keyboardType="numeric"
                editable={!loading}
              />
              {errors.maxAttendees && <Text style={styles.errorText}>{errors.maxAttendees}</Text>}
            </View>
          </View>

          {/* Instructions */}
          <View style={styles.infoCard}>
            <Text style={styles.infoTitle}>📋 Note:</Text>
            <Text style={styles.infoText}>
              • Fields marked with * are required{'\n'}
              • Event date must be today or in the future{'\n'}
              • QR code will be auto-generated for attendance{'\n'}
              • Organizers can scan member QR codes to mark attendance
            </Text>
          </View>
        </ScrollView>

        <StatusBar style="light" />
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    minWidth: 60,
  },
  backButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
  },
  title: {
    ...Theme.typography.h4,
    color: Theme.colors.text.onPrimary,
    textAlign: 'center',
    flex: 1,
  },
  submitButton: {
    minWidth: 60,
    alignItems: 'flex-end',
  },
  submitButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.success,
    fontWeight: '600',
  },
  disabledButton: {
    opacity: 0.6,
  },
  accessDenied: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  accessDeniedText: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.sm,
  },
  accessDeniedSubtext: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: Theme.spacing.lg,
    paddingBottom: Theme.spacing.xl,
  },
  section: {
    backgroundColor: Theme.colors.surface,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
    marginVertical: Theme.spacing.md,
  },
  sectionTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
    borderBottomWidth: 2,
    borderBottomColor: Theme.colors.primary,
    paddingBottom: Theme.spacing.sm,
  },
  inputGroup: {
    marginBottom: Theme.spacing.lg,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  label: {
    ...Theme.typography.body2,
    fontWeight: '600',
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.xs,
  },
  input: {
    backgroundColor: Theme.colors.surface,
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.sm + 2,
    borderRadius: Theme.borderRadius.md,
    fontSize: Theme.typography.body1.fontSize,
    borderWidth: 1,
    borderColor: Theme.colors.border,
    color: Theme.colors.text.primary,
  },
  textArea: {
    height: 80,
    textAlignVertical: 'top',
    paddingTop: Theme.spacing.sm + 2,
  },
  errorInput: {
    borderColor: Theme.colors.error,
    borderWidth: 1.5,
  },
  errorText: {
    ...Theme.typography.caption,
    color: Theme.colors.error,
    marginTop: Theme.spacing.xs,
  },
  eventTypeContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: Theme.spacing.sm,
  },
  eventTypeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.sm,
    borderRadius: Theme.borderRadius.md,
    borderWidth: 1,
    borderColor: Theme.colors.border,
    backgroundColor: Theme.colors.background,
    minWidth: 100,
  },
  selectedEventType: {
    borderColor: Theme.colors.primary,
    backgroundColor: Theme.colors.primary,
  },
  eventTypeIcon: {
    fontSize: 16,
    marginRight: Theme.spacing.xs,
  },
  eventTypeText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
  },
  selectedEventTypeText: {
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  locationContainer: {
    gap: Theme.spacing.sm,
  },
  locationButton: {
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
    borderWidth: 1,
    borderColor: Theme.colors.border,
    backgroundColor: Theme.colors.background,
  },
  selectedLocation: {
    borderColor: Theme.colors.secondary,
    backgroundColor: Theme.colors.secondary,
  },
  locationText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.primary,
    textAlign: 'center',
  },
  selectedLocationText: {
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  infoCard: {
    backgroundColor: '#E8F5E8',
    padding: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    marginVertical: Theme.spacing.lg,
    borderLeftWidth: 4,
    borderLeftColor: Theme.colors.success,
  },
  infoTitle: {
    ...Theme.typography.body2,
    fontWeight: '600',
    color: Theme.colors.secondary,
    marginBottom: Theme.spacing.xs,
  },
  infoText: {
    ...Theme.typography.caption,
    color: Theme.colors.secondary,
    lineHeight: 16,
  },
});

# ==== ./mobile-app/app/event-detail.tsx ====

// mobile-app/app/event-detail.tsx
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  RefreshControl,
  ActivityIndicator,
  Share,
  Modal,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router, useLocalSearchParams } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import { apiRequest } from '../utils/apiUtils';
import QRCode from 'react-native-qrcode-svg';

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
      onSecondary: '#ffffff',
    },
    border: '#eee',
    success: '#4CAF50',
    warning: '#FF9800',
    error: '#F44336',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
  },
  typography: {
    h1: { fontSize: 32, fontWeight: 'bold' as const },
    h2: { fontSize: 28, fontWeight: 'bold' as const },
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
  },
};

interface EventDetail {
  id: string;
  title: string;
  description: string;
  eventDate: string;
  startTime: string;
  endTime: string;
  location: string;
  address: string;
  eventType: string;
  maxAttendees: number;
  isActive: boolean;
  qrCode: string;
  creator: {
    id: string;
    fullName: string;
    role: string;
  };
  attendances: Array<{
    id: string;
    user: {
      fullName: string;
      membershipId: string;
      phone: string;
      role: string;
    };
    checkInTime: string;
    status: string;
  }>;
  attendanceCount: number;
  createdAt: string;
  updatedAt: string;
}

export default function EventDetailScreen() {
  const { user } = useAuth();
  const { id } = useLocalSearchParams();
  const [event, setEvent] = useState<EventDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const [showAttendeesModal, setShowAttendeesModal] = useState(false);

  const isAdmin = () => user?.role === 'admin';
  const isOrganizer = () => user?.role === 'organizer' || user?.role === 'admin';

  useEffect(() => {
    if (id) {
      loadEventDetail();
    }
  }, [id]);

  const loadEventDetail = async () => {
    try {
      const response = await apiRequest<{ event: EventDetail }>(`/events/${id}`);
      
      if (response.success && response.data) {
        setEvent(response.data.event);
      } else {
        Alert.alert('Error', 'Failed to load event details');
        router.back();
      }
    } catch (error) {
      console.error('❌ Error loading event:', error);
      Alert.alert('Error', 'Network error while loading event');
      router.back();
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const onRefresh = () => {
    setRefreshing(true);
    loadEventDetail();
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const formatTime = (timeString: string) => {
    return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  };

  const getEventTypeColor = (eventType: string) => {
    const colors = {
      meeting: '#2196F3',
      rally: '#FF5722',
      conference: '#9C27B0',
      community_service: '#4CAF50',
      training: '#FF9800',
      other: '#607D8B'
    };
    return colors[eventType] || colors.other;
  };

  const getEventTypeIcon = (eventType: string) => {
    const icons = {
      meeting: '🤝',
      rally: '📢',
      conference: '🎤',
      community_service: '🤲',
      training: '📚',
      other: '📅'
    };
    return icons[eventType] || icons.other;
  };

  const shareEvent = async () => {
    if (!event) return;

    try {
      const eventDate = formatDate(event.eventDate);
      const startTime = formatTime(event.startTime);
      
      const shareContent = {
        title: event.title,
        message: `📅 ${event.title}\n\n📍 ${event.location}\n🗓️ ${eventDate}\n🕐 ${startTime}\n\n${event.description || ''}\n\nJoin us at this Gorkha Janshakti Front event!`,
      };

      await Share.share(shareContent);
    } catch (error) {
      console.error('Error sharing event:', error);
    }
  };

  const deleteEvent = () => {
    if (!event) return;

    Alert.alert(
      'Delete Event',
      `Are you sure you want to delete "${event.title}"? This action cannot be undone.`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              const response = await apiRequest(`/events/${event.id}`, {
                method: 'DELETE',
              });

              if (response.success) {
                Alert.alert('Success', 'Event deleted successfully');
                router.back();
              } else {
                Alert.alert('Error', response.error || 'Failed to delete event');
              }
            } catch (error) {
              Alert.alert('Error', 'Network error while deleting event');
            }
          }
        }
      ]
    );
  };

  const renderAttendeesList = () => (
    <Modal
      visible={showAttendeesModal}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalHeader}>
          <TouchableOpacity onPress={() => setShowAttendeesModal(false)}>
            <Text style={styles.modalCloseText}>✕ Close</Text>
          </TouchableOpacity>
          <Text style={styles.modalTitle}>Attendees ({event?.attendanceCount})</Text>
          <View style={{ width: 60 }} />
        </View>

        <ScrollView style={styles.attendeesList}>
          {event?.attendances.map((attendance, index) => (
            <View key={attendance.id} style={styles.attendeeCard}>
              <View style={styles.attendeeInfo}>
                <Text style={styles.attendeeName}>{attendance.user.fullName}</Text>
                <Text style={styles.attendeeId}>ID: {attendance.user.membershipId}</Text>
                <Text style={styles.attendeePhone}>{attendance.user.phone}</Text>
              </View>
              <View style={styles.attendeeStatus}>
                <Text style={[
                  styles.statusBadge,
                  attendance.status === 'present' ? styles.presentBadge :
                  attendance.status === 'late' ? styles.lateBadge : styles.earlyBadge
                ]}>
                  {attendance.status.toUpperCase()}
                </Text>
                <Text style={styles.checkInTime}>
                  {new Date(attendance.checkInTime).toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                  })}
                </Text>
              </View>
            </View>
          ))}
          
          {event?.attendances.length === 0 && (
            <View style={styles.emptyAttendees}>
              <Text style={styles.emptyAttendeesText}>No attendees yet</Text>
            </View>
          )}
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  const renderQRModal = () => (
    <Modal
      visible={showQRModal}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalHeader}>
          <TouchableOpacity onPress={() => setShowQRModal(false)}>
            <Text style={styles.modalCloseText}>✕ Close</Text>
          </TouchableOpacity>
          <Text style={styles.modalTitle}>Event QR Code</Text>
          <TouchableOpacity onPress={shareEvent}>
            <Text style={styles.modalShareText}>Share</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.qrContainer}>
          <Text style={styles.qrTitle}>{event?.title}</Text>
          <Text style={styles.qrSubtitle}>
            {event && formatDate(event.eventDate)} at {event && formatTime(event.startTime)}
          </Text>
          
          <View style={styles.qrCodeWrapper}>
            {event?.qrCode ? (
              <Image source={{ uri: event.qrCode }} style={styles.qrCodeImage} />
            ) : (
              <View style={styles.qrPlaceholder}>
                <Text style={styles.qrPlaceholderText}>QR Code</Text>
              </View>
            )}
          </View>
          
          <Text style={styles.qrInstructions}>
            Organizers can use this QR code or scan member QR codes to mark attendance
          </Text>
        </View>
      </SafeAreaView>
    </Modal>
  );

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Loading...</Text>
        </View>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Theme.colors.primary} />
        </View>
      </SafeAreaView>
    );
  }

  if (!event) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Event Not Found</Text>
        </View>
      </SafeAreaView>
    );
  }

  const isUpcoming = new Date(event.eventDate) > new Date();

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity onPress={() => router.back()}>
          <Text style={styles.backButtonText}>← Back</Text>
        </TouchableOpacity>
        <Text style={styles.title} numberOfLines={1}>Event Details</Text>
        <View style={styles.headerActions}>
          {isAdmin() && (
            <TouchableOpacity onPress={deleteEvent} style={styles.deleteButton}>
              <Text style={styles.deleteButtonText}>🗑️</Text>
            </TouchableOpacity>
          )}
          <TouchableOpacity onPress={shareEvent} style={styles.shareButton}>
            <Text style={styles.shareButtonText}>📤</Text>
          </TouchableOpacity>
        </View>
      </View>

      <ScrollView
        style={styles.scrollView}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[Theme.colors.primary]}
          />
        }
      >
        {/* Event Header */}
        <View style={styles.eventHeader}>
          <View style={styles.eventTypeContainer}>
            <Text style={styles.eventTypeIcon}>{getEventTypeIcon(event.eventType)}</Text>
            <Text style={[
              styles.eventType,
              { backgroundColor: getEventTypeColor(event.eventType) }
            ]}>
              {event.eventType.replace('_', ' ').toUpperCase()}
            </Text>
          </View>
          <Text style={[
            styles.eventStatus,
            { color: isUpcoming ? Theme.colors.success : Theme.colors.secondary }
          ]}>
            {isUpcoming ? 'UPCOMING' : 'COMPLETED'}
          </Text>
        </View>

        <Text style={styles.eventTitle}>{event.title}</Text>

        {/* Event Details */}
        <View style={styles.eventDetailsCard}>
          <View style={styles.detailRow}>
            <Text style={styles.detailIcon}>📅</Text>
            <Text style={styles.detailLabel}>Date:</Text>
            <Text style={styles.detailValue}>{formatDate(event.eventDate)}</Text>
          </View>

          <View style={styles.detailRow}>
            <Text style={styles.detailIcon}>🕐</Text>
            <Text style={styles.detailLabel}>Time:</Text>
            <Text style={styles.detailValue}>
              {formatTime(event.startTime)}
              {event.endTime && ` - ${formatTime(event.endTime)}`}
            </Text>
          </View>

          <View style={styles.detailRow}>
            <Text style={styles.detailIcon}>📍</Text>
            <Text style={styles.detailLabel}>Location:</Text>
            <Text style={styles.detailValue}>{event.location}</Text>
          </View>

          {event.address && (
            <View style={styles.detailRow}>
              <Text style={styles.detailIcon}>🏠</Text>
              <Text style={styles.detailLabel}>Address:</Text>
              <Text style={styles.detailValue}>{event.address}</Text>
            </View>
          )}

          <View style={styles.detailRow}>
            <Text style={styles.detailIcon}>👥</Text>
            <Text style={styles.detailLabel}>Attendees:</Text>
            <TouchableOpacity onPress={() => setShowAttendeesModal(true)}>
              <Text style={[styles.detailValue, styles.attendeesLink]}>
                {event.attendanceCount} registered
                {event.maxAttendees && ` / ${event.maxAttendees} max`}
              </Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Description */}
        {event.description && (
          <View style={styles.descriptionCard}>
            <Text style={styles.descriptionTitle}>Description</Text>
            <Text style={styles.descriptionText}>{event.description}</Text>
          </View>
        )}

        {/* Actions */}
        <View style={styles.actionsCard}>
          <TouchableOpacity
            style={styles.qrButton}
            onPress={() => setShowQRModal(true)}
          >
            <Text style={styles.qrButtonIcon}>📱</Text>
            <Text style={styles.qrButtonText}>View QR Code</Text>
          </TouchableOpacity>

          {isOrganizer() && (
            <TouchableOpacity
              style={styles.scanButton}
              onPress={() => router.push('/attendance-scanner')}
            >
              <Text style={styles.scanButtonIcon}>📷</Text>
              <Text style={styles.scanButtonText}>Mark Attendance</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* Creator Info */}
        <View style={styles.creatorCard}>
          <Text style={styles.creatorTitle}>Event Created By</Text>
          <Text style={styles.creatorName}>{event.creator.fullName}</Text>
          <Text style={styles.creatorRole}>({event.creator.role})</Text>
          <Text style={styles.createdDate}>
            Created: {new Date(event.createdAt).toLocaleDateString()}
          </Text>
        </View>
      </ScrollView>

      {/* Modals */}
      {renderQRModal()}
      {renderAttendeesList()}

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
  },
  title: {
    ...Theme.typography.h4,
    color: Theme.colors.text.onPrimary,
    flex: 1,
    textAlign: 'center',
    marginHorizontal: Theme.spacing.md,
  },
  headerActions: {
    flexDirection: 'row',
    gap: Theme.spacing.sm,
  },
  deleteButton: {
    padding: Theme.spacing.xs,
  },
  deleteButtonText: {
    fontSize: 18,
  },
  shareButton: {
    padding: Theme.spacing.xs,
  },
  shareButtonText: {
    fontSize: 18,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scrollView: {
    flex: 1,
  },
  eventHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: Theme.spacing.lg,
    paddingTop: Theme.spacing.lg,
  },
  eventTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  eventTypeIcon: {
    fontSize: 18,
    marginRight: Theme.spacing.xs,
  },
  eventType: {
    ...Theme.typography.caption,
    color: Theme.colors.text.onPrimary,
    paddingHorizontal: Theme.spacing.sm,
    paddingVertical: Theme.spacing.xs,
    borderRadius: Theme.borderRadius.sm,
    fontWeight: '600',
    fontSize: 11,
  },
  eventStatus: {
    ...Theme.typography.caption,
    fontWeight: '600',
    fontSize: 11,
  },
  eventTitle: {
    ...Theme.typography.h2,
    color: Theme.colors.text.primary,
    paddingHorizontal: Theme.spacing.lg,
    paddingVertical: Theme.spacing.md,
  },
  eventDetailsCard: {
    backgroundColor: Theme.colors.surface,
    margin: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
  },
  detailRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: Theme.spacing.md,
  },
  detailIcon: {
    fontSize: 16,
    width: 25,
    marginRight: Theme.spacing.sm,
  },
  detailLabel: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '500',
    width: 80,
  },
  detailValue: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    flex: 1,
  },
  attendeesLink: {
    color: Theme.colors.primary,
    textDecorationLine: 'underline',
  },
  descriptionCard: {
    backgroundColor: Theme.colors.surface,
    marginHorizontal: Theme.spacing.lg,
    marginBottom: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
  },
  descriptionTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.md,
  },
  descriptionText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    lineHeight: 24,
  },
  actionsCard: {
    backgroundColor: Theme.colors.surface,
    marginHorizontal: Theme.spacing.lg,
    marginBottom: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
    flexDirection: 'row',
    gap: Theme.spacing.md,
  },
  qrButton: {
    flex: 1,
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.sm,
    borderRadius: Theme.borderRadius.md,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  qrButtonIcon: {
    fontSize: 20,
    marginRight: Theme.spacing.xs,
  },
  qrButtonText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  scanButton: {
    flex: 1,
    backgroundColor: Theme.colors.secondary,
    paddingVertical: Theme.spacing.md,
    paddingHorizontal: Theme.spacing.sm,
    borderRadius: Theme.borderRadius.md,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  scanButtonIcon: {
    fontSize: 20,
    marginRight: Theme.spacing.xs,
  },
  scanButtonText: {
    ...Theme.typography.body2,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  creatorCard: {
    backgroundColor: Theme.colors.surface,
    marginHorizontal: Theme.spacing.lg,
    marginBottom: Theme.spacing.xl,
    borderRadius: Theme.borderRadius.lg,
    padding: Theme.spacing.lg,
    alignItems: 'center',
  },
  creatorTitle: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    marginBottom: Theme.spacing.sm,
  },
  creatorName: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    marginBottom: Theme.spacing.xs,
  },
  creatorRole: {
    ...Theme.typography.body2,
    color: Theme.colors.secondary,
    fontWeight: '600',
    marginBottom: Theme.spacing.sm,
  },
  createdDate: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  modalHeader: {
    backgroundColor: Theme.colors.surface,
    paddingVertical: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.lg,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderBottomWidth: 1,
    borderBottomColor: Theme.colors.border,
  },
  modalCloseText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  modalTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
  },
  modalShareText: {
    ...Theme.typography.body1,
    color: Theme.colors.primary,
    fontWeight: '600',
  },
  qrContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: Theme.spacing.lg,
  },
  qrTitle: {
    ...Theme.typography.h3,
    color: Theme.colors.text.primary,
    textAlign: 'center',
    marginBottom: Theme.spacing.sm,
  },
  qrSubtitle: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
    marginBottom: Theme.spacing.xl,
  },
  qrCodeWrapper: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.lg,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  qrCodeImage: {
    width: 200,
    height: 200,
  },
  qrPlaceholder: {
    width: 200,
    height: 200,
    backgroundColor: Theme.colors.background,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: Theme.borderRadius.md,
  },
  qrPlaceholderText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  qrInstructions: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
    maxWidth: 280,
    lineHeight: 20,
  },
  attendeesList: {
    flex: 1,
    padding: Theme.spacing.lg,
  },
  attendeeCard: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.md,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  attendeeInfo: {
    flex: 1,
  },
  attendeeName: {
    ...Theme.typography.body1,
    color: Theme.colors.text.primary,
    fontWeight: '600',
    marginBottom: 2,
  },
  attendeeId: {
    ...Theme.typography.body2,
    color: Theme.colors.primary,
    fontWeight: '500',
    marginBottom: 2,
  },
  attendeePhone: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
  },
  attendeeStatus: {
    alignItems: 'flex-end',
  },
  statusBadge: {
    ...Theme.typography.caption,
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    fontWeight: '600',
    fontSize: 10,
  },
  presentBadge: {
    backgroundColor: '#E8F5E8',
    color: Theme.colors.success,
  },
  lateBadge: {
    backgroundColor: '#FFF3E0',
    color: Theme.colors.warning,
  },
  earlyBadge: {
    backgroundColor: '#E3F2FD',
    color: '#2196F3',
  },
  checkInTime: {
    ...Theme.typography.caption,
    color: Theme.colors.text.secondary,
    marginTop: 2,
  },
  emptyAttendees: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: Theme.spacing.xl,
  },
  emptyAttendeesText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
});

# ==== ./mobile-app/app/attendance-scanner.tsx ====

// mobile-app/app/attendance-scanner.tsx
import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  Modal,
  ActivityIndicator,
  ScrollView,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { CameraView, Camera } from "expo-camera";
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';
import { apiRequest } from '../utils/apiUtils';

const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#333333',
      secondary: '#666666',
      onPrimary: '#ffffff',
    },
    border: '#eee',
    success: '#4CAF50',
    warning: '#FF9800',
    error: '#F44336',
  },
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
  },
  typography: {
    h3: { fontSize: 24, fontWeight: 'bold' as const },
    h4: { fontSize: 20, fontWeight: 'bold' as const },
    body1: { fontSize: 16, fontWeight: 'normal' as const },
    body2: { fontSize: 14, fontWeight: 'normal' as const },
    caption: { fontSize: 12, fontWeight: 'normal' as const },
  },
  borderRadius: {
    md: 8,
    lg: 12,
  },
};

interface AttendanceRecord {
  id: string;
  user: {
    fullName: string;
    membershipId: string;
    phone: string;
    email: string;
    role: string;
  };
  event?: {
    title: string;
    eventDate: string;
  };
  location: string;
  attendanceType: string;
  checkInTime: string;
  status: string;
}

const LOCATIONS = [
  'Central Party Office',
  'Party Office Darjeeling',
  'Party Office Kalimpong',
  'Party Office Kurseong',
];

export default function AttendanceScannerScreen() {
  const { user } = useAuth();
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [loading, setLoading] = useState(false);
  const [attendanceRecord, setAttendanceRecord] = useState<AttendanceRecord | null>(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [scanType, setScanType] = useState<'event' | 'location'>('event');
  const [selectedLocation, setSelectedLocation] = useState('');
  const [showLocationSelector, setShowLocationSelector] = useState(false);
  const camera = useRef(null);

  // Check permissions and role
  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
  }, []);

  // Check if user can mark attendance
  const canMarkAttendance = () => {
    return user?.role === 'admin' || user?.role === 'organizer';
  };

  const handleBarCodeScanned = async ({ type, data }) => {
    if (scanned || loading) return;
    
    setScanned(true);
    setLoading(true);
    
    try {
      console.log('📱 QR Code scanned:', data);
      
      let attendanceData;
      
      if (scanType === 'location') {
        if (!selectedLocation) {
          Alert.alert('Error', 'Please select a location first', [
            { text: 'OK', onPress: resetScanner }
          ]);
          return;
        }
        
        attendanceData = {
          qrData: data,
          location: selectedLocation,
          attendanceType: 'location_visit',
          notes: `Location visit at ${selectedLocation}`
        };
      } else {
        // For event attendance, the QR data should contain event info
        attendanceData = {
          qrData: data,
          attendanceType: 'event'
        };
      }

      const response = await apiRequest<{ attendance: AttendanceRecord }>('/events/attendance/mark', {
        method: 'POST',
        body: JSON.stringify(attendanceData),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.success && response.data) {
        setAttendanceRecord(response.data.attendance);
        setModalVisible(true);
      } else {
        Alert.alert(
          'Attendance Error',
          response.error || 'Failed to mark attendance',
          [{ text: 'Try Again', onPress: resetScanner }]
        );
      }
    } catch (error) {
      console.error('❌ Attendance error:', error);
      Alert.alert(
        'Scan Error',
        'Network error while marking attendance',
        [{ text: 'Try Again', onPress: resetScanner }]
      );
    } finally {
      setLoading(false);
    }
  };

  const resetScanner = () => {
    setScanned(false);
    setAttendanceRecord(null);
    setModalVisible(false);
    setLoading(false);
  };

  const confirmAttendance = () => {
    setModalVisible(false);
    Alert.alert(
      'Attendance Marked!',
      `${attendanceRecord?.user.fullName} has been marked present.`,
      [
        {
          text: 'Scan Another',
          onPress: resetScanner
        },
        {
          text: 'Done',
          onPress: () => router.back()
        }
      ]
    );
  };

  // Access control
  if (!canMarkAttendance()) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Attendance Scanner</Text>
        </View>
        <View style={styles.messageContainer}>
          <Text style={styles.message}>Access Denied</Text>
          <Text style={styles.subMessage}>Only admins and organizers can mark attendance</Text>
        </View>
      </SafeAreaView>
    );
  }

  // Camera permission check
  if (hasPermission === null) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.messageContainer}>
          <ActivityIndicator size="large" color={Theme.colors.primary} />
          <Text style={styles.message}>Requesting camera permission...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (hasPermission === false) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.messageContainer}>
          <Text style={styles.message}>Camera permission denied</Text>
          <Text style={styles.subMessage}>Please enable camera access to scan QR codes</Text>
          <TouchableOpacity style={styles.button} onPress={() => router.back()}>
            <Text style={styles.buttonText}>Go Back</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  // Show location selector if location scan type is selected but no location chosen
  if (scanType === 'location' && !selectedLocation) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => router.back()}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.title}>Select Location</Text>
        </View>
        
        <View style={styles.locationSelectorContainer}>
          <Text style={styles.locationSelectorTitle}>
            Choose location for attendance marking:
          </Text>
          
          {LOCATIONS.map((location) => (
            <TouchableOpacity
              key={location}
              style={styles.locationOption}
              onPress={() => setSelectedLocation(location)}
            >
              <Text style={styles.locationOptionText}>{location}</Text>
              <Text style={styles.locationOptionArrow}>→</Text>
            </TouchableOpacity>
          ))}
          
          <TouchableOpacity
            style={styles.switchScanTypeButton}
            onPress={() => setScanType('event')}
          >
            <Text style={styles.switchScanTypeText}>
              Switch to Event Attendance
            </Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <View style={styles.container}>
      {/* Header Overlay */}
      <View style={styles.headerOverlay}>
        <SafeAreaView>
          <View style={styles.header}>
            <TouchableOpacity onPress={() => router.back()}>
              <Text style={styles.backButtonText}>← Back</Text>
            </TouchableOpacity>
            <Text style={styles.title}>
              {scanType === 'event' ? 'Event Attendance' : `${selectedLocation}`}
            </Text>
          </View>
        </SafeAreaView>
      </View>

      {/* Camera */}
      <CameraView
        style={styles.camera}
        onBarcodeScanned={scanned ? undefined : handleBarCodeScanned}
        barcodeScannerSettings={{
          barcodeTypes: ["qr", "pdf417"],
        }}
      >
        {/* Scan Type Switcher */}
        <View style={styles.scanTypeSwitcher}>
          <TouchableOpacity
            style={[
              styles.scanTypeButton,
              scanType === 'event' && styles.activeScanType
            ]}
            onPress={() => setScanType('event')}
          >
            <Text style={[
              styles.scanTypeText,
              scanType === 'event' && styles.activeScanTypeText
            ]}>
              📅 Event
            </Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={[
              styles.scanTypeButton,
              scanType === 'location' && styles.activeScanType
            ]}
            onPress={() => {
              setScanType('location');
              setSelectedLocation('');
            }}
          >
            <Text style={[
              styles.scanTypeText,
              scanType === 'location' && styles.activeScanTypeText
            ]}>
              📍 Location
            </Text>
          </TouchableOpacity>
        </View>

        {/* Scan Frame */}
        <View style={styles.overlay}>
          <View style={styles.scanFrame} />
          <Text style={styles.scanText}>
            {scanType === 'event' 
              ? 'Scan member QR code for event attendance' 
              : `Scan member QR code for ${selectedLocation} visit`
            }
          </Text>
        </View>
      </CameraView>

      {/* Loading Overlay */}
      {loading && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color={Theme.colors.success} />
          <Text style={styles.loadingText}>Marking attendance...</Text>
        </View>
      )}

      {/* Attendance Confirmation Modal */}
      <Modal
        visible={modalVisible}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Attendance Marked!</Text>
          </View>

          {attendanceRecord && (
            <ScrollView style={styles.modalContent}>
              <View style={styles.successIcon}>
                <Text style={styles.successIconText}>✅</Text>
              </View>

              <View style={styles.memberInfo}>
                <Text style={styles.memberName}>{attendanceRecord.user.fullName}</Text>
                <Text style={styles.membershipId}>ID: {attendanceRecord.user.membershipId}</Text>
                <Text style={styles.memberDetails}>{attendanceRecord.user.phone}</Text>
                <Text style={styles.memberDetails}>{attendanceRecord.user.email}</Text>
              </View>

              <View style={styles.attendanceDetails}>
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Type:</Text>
                  <Text style={styles.detailValue}>
                    {attendanceRecord.attendanceType === 'event' ? 'Event Attendance' : 'Location Visit'}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Location:</Text>
                  <Text style={styles.detailValue}>{attendanceRecord.location}</Text>
                </View>

                {attendanceRecord.event && (
                  <View style={styles.detailRow}>
                    <Text style={styles.detailLabel}>Event:</Text>
                    <Text style={styles.detailValue}>{attendanceRecord.event.title}</Text>
                  </View>
                )}

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Time:</Text>
                  <Text style={styles.detailValue}>
                    {new Date(attendanceRecord.checkInTime).toLocaleString()}
                  </Text>
                </View>

                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Status:</Text>
                  <Text style={[
                    styles.detailValue,
                    styles.statusText,
                    attendanceRecord.status === 'present' ? styles.presentStatus :
                    attendanceRecord.status === 'late' ? styles.lateStatus : 
                    styles.earlyStatus
                  ]}>
                    {attendanceRecord.status.toUpperCase()}
                  </Text>
                </View>
              </View>

              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={styles.scanAnotherButton}
                  onPress={resetScanner}
                >
                  <Text style={styles.scanAnotherButtonText}>Scan Another</Text>
                </TouchableOpacity>
                
                <TouchableOpacity
                  style={styles.doneButton}
                  onPress={() => router.back()}
                >
                  <Text style={styles.doneButtonText}>Done</Text>
                </TouchableOpacity>
              </View>
            </ScrollView>
          )}
        </SafeAreaView>
      </Modal>

      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  headerOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 1000,
    backgroundColor: 'rgba(27, 41, 81, 0.9)',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 15,
  },
  backButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  title: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
    textAlign: 'center',
  },
  camera: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  scanTypeSwitcher: {
    position: 'absolute',
    top: 120,
    left: 20,
    right: 20,
    flexDirection: 'row',
    backgroundColor: 'rgba(0,0,0,0.7)',
    borderRadius: Theme.borderRadius.lg,
    padding: 4,
  },
  scanTypeButton: {
    flex: 1,
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: Theme.borderRadius.md,
    alignItems: 'center',
  },
  activeScanType: {
    backgroundColor: Theme.colors.secondary,
  },
  scanTypeText: {
    color: 'white',
    fontSize: 14,
    fontWeight: '500',
  },
  activeScanTypeText: {
    fontWeight: 'bold',
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0,0,0,0.3)',
  },
  scanFrame: {
    width: 250,
    height: 250,
    borderWidth: 3,
    borderColor: Theme.colors.secondary,
    backgroundColor: 'transparent',
    borderRadius: 20,
  },
  scanText: {
    color: 'white',
    fontSize: 16,
    marginTop: 30,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
    maxWidth: 280,
  },
  messageContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 20,
    backgroundColor: Theme.colors.background,
  },
  message: {
    ...Theme.typography.h3,
    color: Theme.colors.text.primary,
    textAlign: 'center',
    marginBottom: 10,
  },
  subMessage: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
    textAlign: 'center',
    marginBottom: 30,
  },
  button: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: Theme.borderRadius.md,
  },
  buttonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 999,
  },
  loadingText: {
    color: 'white',
    fontSize: 16,
    marginTop: 15,
  },
  locationSelectorContainer: {
    flex: 1,
    padding: Theme.spacing.lg,
  },
  locationSelectorTitle: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    textAlign: 'center',
    marginBottom: Theme.spacing.xl,
  },
  locationOption: {
    backgroundColor: Theme.colors.surface,
    paddingVertical: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.md,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  locationOptionText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.primary,
    fontWeight: '500',
  },
  locationOptionArrow: {
    ...Theme.typography.body1,
    color: Theme.colors.text.secondary,
  },
  switchScanTypeButton: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
    marginTop: Theme.spacing.xl,
    alignItems: 'center',
  },
  switchScanTypeText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  modalHeader: {
    backgroundColor: Theme.colors.surface,
    paddingVertical: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.lg,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: Theme.colors.border,
  },
  modalTitle: {
    ...Theme.typography.h3,
    color: Theme.colors.text.primary,
  },
  modalContent: {
    flex: 1,
    padding: Theme.spacing.lg,
  },
  successIcon: {
    alignItems: 'center',
    marginBottom: Theme.spacing.lg,
  },
  successIconText: {
    fontSize: 64,
  },
  memberInfo: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    alignItems: 'center',
    marginBottom: Theme.spacing.lg,
  },
  memberName: {
    ...Theme.typography.h4,
    color: Theme.colors.text.primary,
    textAlign: 'center',
    marginBottom: Theme.spacing.xs,
  },
  membershipId: {
    ...Theme.typography.body1,
    color: Theme.colors.primary,
    fontWeight: '600',
    marginBottom: Theme.spacing.sm,
  },
  memberDetails: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    marginBottom: 2,
  },
  attendanceDetails: {
    backgroundColor: Theme.colors.surface,
    padding: Theme.spacing.lg,
    borderRadius: Theme.borderRadius.lg,
    marginBottom: Theme.spacing.lg,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: Theme.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: Theme.colors.border,
  },
  detailLabel: {
    ...Theme.typography.body2,
    color: Theme.colors.text.secondary,
    fontWeight: '500',
  },
  detailValue: {
    ...Theme.typography.body2,
    color: Theme.colors.text.primary,
    fontWeight: '600',
    flex: 1,
    textAlign: 'right',
  },
  statusText: {
    fontSize: 12,
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  presentStatus: {
    backgroundColor: '#E8F5E8',
    color: Theme.colors.success,
  },
  lateStatus: {
    backgroundColor: '#FFF3E0',
    color: Theme.colors.warning,
  },
  earlyStatus: {
    backgroundColor: '#E3F2FD',
    color: '#2196F3',
  },
  modalButtons: {
    flexDirection: 'row',
    gap: Theme.spacing.md,
  },
  scanAnotherButton: {
    flex: 1,
    backgroundColor: Theme.colors.secondary,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
    alignItems: 'center',
  },
  scanAnotherButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
  doneButton: {
    flex: 1,
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.md,
    alignItems: 'center',
  },
  doneButtonText: {
    ...Theme.typography.body1,
    color: Theme.colors.text.onPrimary,
    fontWeight: '600',
  },
});

# ==== ./mobile-app/app/admin.tsx ====

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { useAuth } from '../contexts/AuthContext';

export default function AdminDashboard() {
  const { user, logout } = useAuth();
  const [stats, setStats] = useState({
    totalMembers: 0,
    newMembersThisWeek: 0,
    activeMembers: 0,
  });

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    // In a real app, you'd load these from your backend
    setStats({
      totalMembers: 156,
      newMembersThisWeek: 12,
      activeMembers: 142,
    });
  };

  const handleLogout = () => {
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Logout', 
          onPress: async () => {
            await logout();
            router.replace('/');
          }
        },
      ]
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerLeft}>
            <Text style={styles.roleText}>{user?.role?.toUpperCase()}</Text>
            <Text style={styles.nameText}>{user?.name}</Text>
          </View>
          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
            <Text style={styles.logoutText}>Logout</Text>
          </TouchableOpacity>
        </View>

        {/* Welcome Card */}
        <View style={styles.welcomeCard}>
          <Text style={styles.welcomeTitle}>
            {user?.role === 'admin' ? 'Admin Control Panel' : 'Organizer Dashboard'}
          </Text>
          <Text style={styles.welcomeSubtitle}>
            Manage party membership and activities
          </Text>
        </View>

        {/* Stats Cards */}
        <View style={styles.statsContainer}>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{stats.totalMembers}</Text>
            <Text style={styles.statLabel}>Total Members</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{stats.newMembersThisWeek}</Text>
            <Text style={styles.statLabel}>New This Week</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{stats.activeMembers}</Text>
            <Text style={styles.statLabel}>Active Members</Text>
          </View>
        </View>

        {/* Action Buttons */}
        <View style={styles.actionSection}>
          <Text style={styles.sectionTitle}>Member Management</Text>
          
          <TouchableOpacity
            style={styles.primaryAction}
            onPress={() => router.push('/scanner')}
          >
            <Text style={styles.primaryActionText}>📱 Scan Member QR Code</Text>
            <Text style={styles.actionSubtext}>Verify member identity</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.primaryAction}
            onPress={() => router.push('/members')}
          >
            <Text style={styles.primaryActionText}>👥 View All Members</Text>
            <Text style={styles.actionSubtext}>Browse member directory</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.secondaryAction}
            onPress={() => router.push('/register')}
          >
            <Text style={styles.secondaryActionText}>➕ Register New Member</Text>
          </TouchableOpacity>
        </View>

        {/* Admin Only Features */}
        {user?.role === 'admin' && (
          <View style={styles.actionSection}>
            <Text style={styles.sectionTitle}>Admin Features</Text>
            
            <TouchableOpacity
              style={styles.adminAction}
              onPress={() => router.push('/roles')}
            >
              <Text style={styles.adminActionText}>⚙️ Manage Roles</Text>
              <Text style={styles.actionSubtext}>Assign organizer permissions</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.adminAction}
              onPress={() => Alert.alert('Feature', 'Export functionality coming soon!')}
            >
              <Text style={styles.adminActionText}>📊 Export Data</Text>
              <Text style={styles.actionSubtext}>Download member reports</Text>
            </TouchableOpacity>
          </View>
        )}
      </ScrollView>

      <StatusBar style="light" />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    backgroundColor: '#1B2951',
    paddingVertical: 20,
    paddingHorizontal: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerLeft: {
    flex: 1,
  },
  roleText: {
    color: '#4CAF50',
    fontSize: 12,
    fontWeight: 'bold',
  },
  nameText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  logoutButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'white',
  },
  logoutText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  welcomeCard: {
    backgroundColor: 'white',
    margin: 20,
    borderRadius: 15,
    padding: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  welcomeTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1B2951',
    marginBottom: 10,
  },
  welcomeSubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  statsContainer: {
    flexDirection: 'row',
    marginHorizontal: 20,
    marginBottom: 20,
    gap: 10,
  },
  statCard: {
    flex: 1,
    backgroundColor: 'white',
    paddingVertical: 20,
    paddingHorizontal: 15,
    borderRadius: 15,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2D5016',
    marginBottom: 5,
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
  },
  actionSection: {
    marginHorizontal: 20,
    marginBottom: 30,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  primaryAction: {
    backgroundColor: '#2D5016',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    marginBottom: 10,
  },
  primaryActionText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  secondaryAction: {
    backgroundColor: 'white',
    borderWidth: 2,
    borderColor: '#2D5016',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    marginBottom: 10,
  },
  secondaryActionText: {
    color: '#2D5016',
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  adminAction: {
    backgroundColor: '#1B2951',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    marginBottom: 10,
  },
  adminActionText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  actionSubtext: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 12,
  },
});

# ==== ./mobile-app/constants/Colors.ts ====

/**
 * Below are the colors that are used in the app. The colors are defined in the light and dark mode.
 * There are many other ways to style your app. For example, [Nativewind](https://www.nativewind.dev/), [Tamagui](https://tamagui.dev/), [unistyles](https://reactnativeunistyles.vercel.app), etc.
 */

const tintColorLight = '#0a7ea4';
const tintColorDark = '#fff';

export const Colors = {
  light: {
    text: '#11181C',
    background: '#fff',
    tint: tintColorLight,
    icon: '#687076',
    tabIconDefault: '#687076',
    tabIconSelected: tintColorLight,
  },
  dark: {
    text: '#ECEDEE',
    background: '#151718',
    tint: tintColorDark,
    icon: '#9BA1A6',
    tabIconDefault: '#9BA1A6',
    tabIconSelected: tintColorDark,
  },
};


# ==== ./mobile-app/constants/Theme.ts ====

// constants/Theme.ts
export const Theme = {
  colors: {
    primary: '#1B2951',
    secondary: '#2D5016',
    accent: '#E0E0E0',
    background: '#f5f5f5',
    surface: '#ffffff',
    text: {
      primary: '#000000',
      secondary: '#666666',
      onPrimary: '#ffffff',
      onSecondary: '#ffffff',
    },
    border: '#E0E0E0',
    error: '#FF5252',
    success: '#4CAF50',
    warning: '#FF9800',
  },
  
  spacing: {
    xs: 4,
    sm: 8,
    md: 16,
    lg: 24,
    xl: 32,
    xxl: 40,
  },
  
  typography: {
    h1: {
      fontSize: 32,
      fontWeight: 'bold' as const,
      lineHeight: 40,
    },
    h2: {
      fontSize: 28,
      fontWeight: 'bold' as const,
      lineHeight: 36,
    },
    h3: {
      fontSize: 24,
      fontWeight: 'bold' as const,
      lineHeight: 32,
    },
    h4: {
      fontSize: 20,
      fontWeight: 'bold' as const,
      lineHeight: 28,
    },
    body1: {
      fontSize: 16,
      fontWeight: 'normal' as const,
      lineHeight: 24,
    },
    body2: {
      fontSize: 14,
      fontWeight: 'normal' as const,
      lineHeight: 20,
    },
    button: {
      fontSize: 16,
      fontWeight: 'bold' as const,
      lineHeight: 24,
    },
  },
  
  borderRadius: {
    sm: 4,
    md: 8,
    lg: 12,
    xl: 16,
  },
  
  shadows: {
    sm: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 1 },
      shadowOpacity: 0.1,
      shadowRadius: 2,
      elevation: 2,
    },
    md: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.15,
      shadowRadius: 4,
      elevation: 4,
    },
    lg: {
      shadowColor: '#000',
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.2,
      shadowRadius: 8,
      elevation: 8,
    },
  },
};

// Common layout styles
export const CommonStyles = {
  container: {
    flex: 1,
    backgroundColor: Theme.colors.background,
  },
  
  safeContainer: {
    flex: 1,
    backgroundColor: Theme.colors.primary,
  },
  
  header: {
    backgroundColor: Theme.colors.primary,
    paddingVertical: Theme.spacing.lg,
    paddingHorizontal: Theme.spacing.lg,
  },
  
  content: {
    flex: 1,
    paddingHorizontal: Theme.spacing.lg,
    paddingTop: Theme.spacing.xl,
  },
  
  centerContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  form: {
    gap: Theme.spacing.md,
  },
  
  input: {
    backgroundColor: Theme.colors.surface,
    paddingHorizontal: Theme.spacing.md,
    paddingVertical: Theme.spacing.sm,
    borderRadius: Theme.borderRadius.md,
    fontSize: Theme.typography.body1.fontSize,
    borderWidth: 1,
    borderColor: Theme.colors.border,
  },
  
  primaryButton: {
    backgroundColor: Theme.colors.secondary,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    alignItems: 'center' as const,
    justifyContent: 'center' as const,
  },
  
  secondaryButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: Theme.colors.surface,
    paddingVertical: Theme.spacing.md,
    borderRadius: Theme.borderRadius.lg,
    alignItems: 'center' as const,
    justifyContent: 'center' as const,
  },
  
  buttonText: {
    ...Theme.typography.button,
    color: Theme.colors.text.onSecondary,
  },
  
  secondaryButtonText: {
    ...Theme.typography.button,
    color: Theme.colors.surface,
  },
};

# ==== ./mobile-app/utils/apiUtils.ts ====


import AsyncStorage from '@react-native-async-storage/async-storage';

// Configuration
const API_CONFIG = {
  BASE_URL: 'http://192.168.1.65:5000/api',
  TIMEOUT: 8000, // 8 seconds timeout for production
  RETRY_ATTEMPTS: 2,
  RETRY_DELAY: 1000, // 1 second between retries
};

interface ApiOptions extends RequestInit {
  timeout?: number;
  retryAttempts?: number;
  retryDelay?: number;
  requireAuth?: boolean;
}

interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  status?: number;
}

// Delay utility for retries
const delay = (ms: number): Promise<void> => 
  new Promise(resolve => setTimeout(resolve, ms));

/**
 * Production-ready fetch wrapper with timeout, retries, and error handling
 */
export const apiRequest = async <T = any>(
  endpoint: string, 
  options: ApiOptions = {}
): Promise<ApiResponse<T>> => {
  const {
    timeout = API_CONFIG.TIMEOUT,
    retryAttempts = API_CONFIG.RETRY_ATTEMPTS,
    retryDelay = API_CONFIG.RETRY_DELAY,
    requireAuth = true,
    ...fetchOptions
  } = options;

  const url = endpoint.startsWith('http') ? endpoint : `${API_CONFIG.BASE_URL}${endpoint}`;
  
  // Prepare headers
  const headers: HeadersInit = {
    'Content-Type': 'application/json',
    ...fetchOptions.headers,
  };

  // Add auth header if required
  if (requireAuth) {
    try {
      const token = await AsyncStorage.getItem('token');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      } else {
        console.log('⚠️ No auth token found for authenticated request');
        return {
          success: false,
          error: 'Authentication required but no token found',
          status: 401,
        };
      }
    } catch (error) {
      console.error('❌ Error getting auth token:', error);
      return {
        success: false,
        error: 'Failed to retrieve authentication token',
        status: 401,
      };
    }
  }

  // Retry logic
  for (let attempt = 0; attempt <= retryAttempts; attempt++) {
    try {
      // Create AbortController for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        controller.abort();
        console.log(`⏰ Request to ${endpoint} timed out after ${timeout}ms (attempt ${attempt + 1})`);
      }, timeout);

      console.log(`🌐 API Request: ${fetchOptions.method || 'GET'} ${url} (attempt ${attempt + 1})`);

      const response = await fetch(url, {
        ...fetchOptions,
        headers,
        signal: controller.signal,
      });

      // Clear timeout on successful request
      clearTimeout(timeoutId);

      console.log(`📡 Response: ${response.status} ${response.statusText}`);

      // Handle different response statuses
      if (response.ok) {
        try {
          const data = await response.json();
          return {
            success: true,
            data,
            status: response.status,
          };
        } catch (parseError) {
          console.error('❌ Error parsing response JSON:', parseError);
          return {
            success: false,
            error: 'Failed to parse server response',
            status: response.status,
          };
        }
      } else {
        // Handle non-2xx responses
        let errorMessage = `Server error: ${response.status} ${response.statusText}`;
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorData.error || errorMessage;
        } catch {
          // If we can't parse error response, use default message
        }

        console.log(`⚠️ API Error: ${errorMessage}`);
        
        return {
          success: false,
          error: errorMessage,
          status: response.status,
        };
      }

    } catch (error: any) {
      console.error(`❌ Network error (attempt ${attempt + 1}):`, error.message);

      // Don't retry on abort errors (timeouts) or on the last attempt
      if (error.name === 'AbortError' || attempt === retryAttempts) {
        return {
          success: false,
          error: error.name === 'AbortError' ? 'Request timed out' : 'Network error',
          status: 0,
        };
      }

      // Wait before retrying (exponential backoff)
      const waitTime = retryDelay * Math.pow(2, attempt);
      console.log(`⏳ Waiting ${waitTime}ms before retry...`);
      await delay(waitTime);
    }
  }

  // This should never be reached, but TypeScript requires it
  return {
    success: false,
    error: 'Maximum retry attempts exceeded',
    status: 0,
  };
};

/**
 * Specialized API methods for common operations
 */
export const api = {
  // GET request
  get: <T = any>(endpoint: string, options: Omit<ApiOptions, 'method'> = {}) =>
    apiRequest<T>(endpoint, { ...options, method: 'GET' }),

  // POST request
  post: <T = any>(endpoint: string, data?: any, options: Omit<ApiOptions, 'method' | 'body'> = {}) =>
    apiRequest<T>(endpoint, {
      ...options,
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    }),

  // PUT request
  put: <T = any>(endpoint: string, data?: any, options: Omit<ApiOptions, 'method' | 'body'> = {}) =>
    apiRequest<T>(endpoint, {
      ...options,
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    }),

  // DELETE request
  delete: <T = any>(endpoint: string, options: Omit<ApiOptions, 'method'> = {}) =>
    apiRequest<T>(endpoint, { ...options, method: 'DELETE' }),
};

/**
 * Specific API endpoints
 */
export const profileAPI = {
  // Get user profile
  getProfile: () => api.get('/members/profile'),

  // Update user profile
  updateProfile: (profileData: any) => api.put('/members/profile', profileData),
};

export const authAPI = {
  // Login (no auth required)
  login: (credentials: { identifier: string; password: string }) =>
    api.post('/auth/login', credentials, { requireAuth: false }),

  // Register (no auth required)  
  register: (userData: any) =>
    api.post('/auth/register', userData, { requireAuth: false }),
};

export const memberAPI = {
  // Get all members
  getAllMembers: () => api.get('/members'),

  // Update member role
  updateMemberRole: (id: string, role: string) =>
    api.put(`/members/${id}/role`, { role }),

  // Delete member
  deleteMember: (id: string) => api.delete(`/members/${id}`),
};

export default api;

# ==== ./mobile-app/components/ExternalLink.tsx ====

import { Link } from 'expo-router';
import { openBrowserAsync } from 'expo-web-browser';
import { type ComponentProps } from 'react';
import { Platform } from 'react-native';

type Props = Omit<ComponentProps<typeof Link>, 'href'> & { href: string };

export function ExternalLink({ href, ...rest }: Props) {
  return (
    <Link
      target="_blank"
      {...rest}
      href={href}
      onPress={async (event) => {
        if (Platform.OS !== 'web') {
          // Prevent the default behavior of linking to the default browser on native.
          event.preventDefault();
          // Open the link in an in-app browser.
          await openBrowserAsync(href);
        }
      }}
    />
  );
}

# ==== ./mobile-app/components/ThemedText.tsx ====

import { StyleSheet, Text, type TextProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedTextProps = TextProps & {
  lightColor?: string;
  darkColor?: string;
  type?: 'default' | 'title' | 'defaultSemiBold' | 'subtitle' | 'link';
};

export function ThemedText({
  style,
  lightColor,
  darkColor,
  type = 'default',
  ...rest
}: ThemedTextProps) {
  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');

  return (
    <Text
      style={[
        { color },
        type === 'default' ? styles.default : undefined,
        type === 'title' ? styles.title : undefined,
        type === 'defaultSemiBold' ? styles.defaultSemiBold : undefined,
        type === 'subtitle' ? styles.subtitle : undefined,
        type === 'link' ? styles.link : undefined,
        style,
      ]}
      {...rest}
    />
  );
}

const styles = StyleSheet.create({
  default: {
    fontSize: 16,
    lineHeight: 24,
  },
  defaultSemiBold: {
    fontSize: 16,
    lineHeight: 24,
    fontWeight: '600',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    lineHeight: 32,
  },
  subtitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  link: {
    lineHeight: 30,
    fontSize: 16,
    color: '#0a7ea4',
  },
});

# ==== ./mobile-app/components/TabBarBackground.tsx ====

// This is a shim for web and Android where the tab bar is generally opaque.
export default undefined;

export function useBottomTabOverflow() {
  return 0;
}

# ==== ./mobile-app/components/ThemedView.tsx ====

import { View, type ViewProps } from 'react-native';

import { useThemeColor } from '@/hooks/useThemeColor';

export type ThemedViewProps = ViewProps & {
  lightColor?: string;
  darkColor?: string;
};

export function ThemedView({ style, lightColor, darkColor, ...otherProps }: ThemedViewProps) {
  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');

  return <View style={[{ backgroundColor }, style]} {...otherProps} />;
}

# ==== ./mobile-app/components/HelloWave.tsx ====

import { useEffect } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  useAnimatedStyle,
  useSharedValue,
  withRepeat,
  withSequence,
  withTiming,
} from 'react-native-reanimated';

import { ThemedText } from '@/components/ThemedText';

export function HelloWave() {
  const rotationAnimation = useSharedValue(0);

  useEffect(() => {
    rotationAnimation.value = withRepeat(
      withSequence(withTiming(25, { duration: 150 }), withTiming(0, { duration: 150 })),
      4 // Run the animation 4 times
    );
  }, [rotationAnimation]);

  const animatedStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotationAnimation.value}deg` }],
  }));

  return (
    <Animated.View style={animatedStyle}>
      <ThemedText style={styles.text}>👋</ThemedText>
    </Animated.View>
  );
}

const styles = StyleSheet.create({
  text: {
    fontSize: 28,
    lineHeight: 32,
    marginTop: -6,
  },
});

# ==== ./mobile-app/components/ParallaxScrollView.tsx ====

import type { PropsWithChildren, ReactElement } from 'react';
import { StyleSheet } from 'react-native';
import Animated, {
  interpolate,
  useAnimatedRef,
  useAnimatedStyle,
  useScrollViewOffset,
} from 'react-native-reanimated';

import { ThemedView } from '@/components/ThemedView';
import { useBottomTabOverflow } from '@/components/ui/TabBarBackground';
import { useColorScheme } from '@/hooks/useColorScheme';

const HEADER_HEIGHT = 250;

type Props = PropsWithChildren<{
  headerImage: ReactElement;
  headerBackgroundColor: { dark: string; light: string };
}>;

export default function ParallaxScrollView({
  children,
  headerImage,
  headerBackgroundColor,
}: Props) {
  const colorScheme = useColorScheme() ?? 'light';
  const scrollRef = useAnimatedRef<Animated.ScrollView>();
  const scrollOffset = useScrollViewOffset(scrollRef);
  const bottom = useBottomTabOverflow();
  const headerAnimatedStyle = useAnimatedStyle(() => {
    return {
      transform: [
        {
          translateY: interpolate(
            scrollOffset.value,
            [-HEADER_HEIGHT, 0, HEADER_HEIGHT],
            [-HEADER_HEIGHT / 2, 0, HEADER_HEIGHT * 0.75]
          ),
        },
        {
          scale: interpolate(scrollOffset.value, [-HEADER_HEIGHT, 0, HEADER_HEIGHT], [2, 1, 1]),
        },
      ],
    };
  });

  return (
    <ThemedView style={styles.container}>
      <Animated.ScrollView
        ref={scrollRef}
        scrollEventThrottle={16}
        scrollIndicatorInsets={{ bottom }}
        contentContainerStyle={{ paddingBottom: bottom }}>
        <Animated.View
          style={[
            styles.header,
            { backgroundColor: headerBackgroundColor[colorScheme] },
            headerAnimatedStyle,
          ]}>
          {headerImage}
        </Animated.View>
        <ThemedView style={styles.content}>{children}</ThemedView>
      </Animated.ScrollView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    height: HEADER_HEIGHT,
    overflow: 'hidden',
  },
  content: {
    flex: 1,
    padding: 32,
    gap: 16,
    overflow: 'hidden',
  },
});

# ==== ./mobile-app/components/HapticTab.tsx ====

import { BottomTabBarButtonProps } from '@react-navigation/bottom-tabs';
import { PlatformPressable } from '@react-navigation/elements';
import * as Haptics from 'expo-haptics';

export function HapticTab(props: BottomTabBarButtonProps) {
  return (
    <PlatformPressable
      {...props}
      onPressIn={(ev) => {
        if (process.env.EXPO_OS === 'ios') {
          // Add a soft haptic feedback when pressing down on the tabs.
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }
        props.onPressIn?.(ev);
      }}
    />
  );
}

# ==== ./mobile-app/components/Collapsible.tsx ====

import { PropsWithChildren, useState } from 'react';
import { StyleSheet, TouchableOpacity } from 'react-native';

import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { IconSymbol } from '@/components/ui/IconSymbol';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function Collapsible({ children, title }: PropsWithChildren & { title: string }) {
  const [isOpen, setIsOpen] = useState(false);
  const theme = useColorScheme() ?? 'light';

  return (
    <ThemedView>
      <TouchableOpacity
        style={styles.heading}
        onPress={() => setIsOpen((value) => !value)}
        activeOpacity={0.8}>
        <IconSymbol
          name="chevron.right"
          size={18}
          weight="medium"
          color={theme === 'light' ? Colors.light.icon : Colors.dark.icon}
          style={{ transform: [{ rotate: isOpen ? '90deg' : '0deg' }] }}
        />
        <ThemedText type="defaultSemiBold">{title}</ThemedText>
      </TouchableOpacity>
      {isOpen && <ThemedView style={styles.content}>{children}</ThemedView>}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  heading: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  content: {
    marginTop: 6,
    marginLeft: 24,
  },
});

# ==== ./mobile-app/components/ui/TabBarBackground.ios.tsx ====

import { BlurView } from 'expo-blur';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

export default function BlurTabBarBackground() {
  const { bottom } = useSafeAreaInsets();

  return (
    <BlurView
      tint="systemMaterial"
      intensity={100}
      style={{
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: -bottom,
        right: 0,
      }}
    />
  );
}

export function useBottomTabOverflow() {
  const { bottom } = useSafeAreaInsets();
  return bottom;
}

# ==== ./mobile-app/components/ui/IconSymbol.tsx ====

import MaterialIcons from '@expo/vector-icons/MaterialIcons';
import { type IconProps } from '@expo/vector-icons/build/createIconSet';
import { type ComponentProps } from 'react';

/**
 * An icon component that uses native SF Symbols on iOS, and Material Icons on Android and web.
 * This ensures a consistent look across platforms, and optimal resource usage.
 * Icon `name`s are based on SF Symbols and require manual mapping to Material Icons.
 */
export function IconSymbol({
  name,
  size = 24,
  color,
  style,
}: {
  name: string;
  size?: number;
  color: string;
  style?: ComponentProps<typeof MaterialIcons>['style'];
}) {
  return <MaterialIcons color={color} size={size} name={name as any} style={style} />;
}

# ==== ./mobile-app/hooks/useColorScheme.web.ts ====

import { useEffect, useState } from 'react';
import { useColorScheme as useRNColorScheme } from 'react-native';

/**
 * To support static rendering, this value needs to be re-calculated on the client side for web
 */
export function useColorScheme() {
  const [hasHydrated, setHasHydrated] = useState(false);

  useEffect(() => {
    setHasHydrated(true);
  }, []);

  const colorScheme = useRNColorScheme();

  if (hasHydrated) {
    return colorScheme;
  }

  return 'light';
}


# ==== ./mobile-app/hooks/useThemeColor.ts ====

/**
 * Learn more about light and dark modes:
 * https://docs.expo.dev/guides/color-schemes/
 */

import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';

export function useThemeColor(
  props: { light?: string; dark?: string },
  colorName: keyof typeof Colors.light & keyof typeof Colors.dark
) {
  const theme = useColorScheme() ?? 'light';
  const colorFromProps = props[theme];

  if (colorFromProps) {
    return colorFromProps;
  } else {
    return Colors[theme][colorName];
  }
}


# ==== ./mobile-app/hooks/useColorScheme.ts ====

export { useColorScheme } from 'react-native';

# ==== ./mobile-app/.vscode/settings.json ====

{
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.organizeImports": "explicit",
    "source.sortMembers": "explicit"
  }
}

# ==== ./mobile-app/services/apiService.js ====

// mobile-app/services/apiService.js
import AsyncStorage from '@react-native-async-storage/async-storage';

export const API_CONFIG = {
  BASE_URL: 'http://192.168.1.65:5000/api',
  TIMEOUT: 10000,
  RETRY_ATTEMPTS: 2,
  RETRY_DELAY: 1000,
};

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

export const apiRequest = async (endpoint, options = {}) => {
  const {
    timeout = API_CONFIG.TIMEOUT,
    retryAttempts = API_CONFIG.RETRY_ATTEMPTS,
    retryDelay = API_CONFIG.RETRY_DELAY,
    requireAuth = false,
    ...fetchOptions
  } = options;

  const url = endpoint.startsWith('http') ? endpoint : `${API_CONFIG.BASE_URL}${endpoint}`;
  
  const headers = {
    'Content-Type': 'application/json',
    ...fetchOptions.headers,
  };

  if (requireAuth) {
    try {
      const token = await AsyncStorage.getItem('token');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      } else {
        throw new Error('No authentication token found');
      }
    } catch (error) {
      throw new Error('Authentication required but no token found');
    }
  }

  for (let attempt = 0; attempt <= retryAttempts; attempt++) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);

      console.log(`🌐 API Request: ${fetchOptions.method || 'GET'} ${url} (attempt ${attempt + 1})`);

      const response = await fetch(url, {
        ...fetchOptions,
        headers,
        signal: controller.signal,
      });

      clearTimeout(timeoutId);
      console.log(`📡 Response: ${response.status} ${response.statusText}`);

      const data = await response.json();

      if (response.ok) {
        return { success: true, data, status: response.status };
      } else {
        return { success: false, error: data.message || 'Request failed', status: response.status, data };
      }
    } catch (error) {
      console.error(`❌ Request attempt ${attempt + 1} failed:`, error.message);
      
      if (attempt === retryAttempts) {
        let errorMessage = 'Network error. Please try again.';
        if (error.name === 'AbortError') {
          errorMessage = 'Request timed out. Please check your connection.';
        } else if (error.message.includes('Network request failed')) {
          errorMessage = 'Unable to connect to server. Please check your internet connection.';
        }
        throw new Error(errorMessage);
      }
      await delay(retryDelay);
    }
  }
};

export const authAPI = {
  login: async (identifier, password) => {
    return apiRequest('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ identifier, password }),
    });
  },
};

export const handleApiError = (error, defaultMessage = 'Something went wrong') => {
  if (typeof error === 'string') return error;
  if (error?.message) return error.message;
  return defaultMessage;
};

# ==== ./mobile-app/src/context/AuthContext.js ====

import React, { createContext, useState, useContext, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const userData = await AsyncStorage.getItem('user');
      
      if (token && userData) {
        setUser(JSON.parse(userData));
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    } finally {
      setLoading(false);
    }
  };

  const login = async (token, userData) => {
    try {
      await AsyncStorage.setItem('token', token);
      await AsyncStorage.setItem('user', JSON.stringify(userData));
      setUser(userData);
    } catch (error) {
      console.error('Error saving user data:', error);
    }
  };

  const logout = async () => {
    try {
      await AsyncStorage.removeItem('token');
      await AsyncStorage.removeItem('user');
      setUser(null);
    } catch (error) {
      console.error('Error removing user data:', error);
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

# ==== ./mobile-app/src/screens/RegisterScreen.js ====

import React from 'react';
import { View, Text } from 'react-native';

const RegisterScreen = () => {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Register Screen - Coming Soon!</Text>
    </View>
  );
};

export default RegisterScreen;

# ==== ./mobile-app/src/screens/LoginScreen.js ====

import React from 'react';
import { View, Text } from 'react-native';

const LoginScreen = () => {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Login Screen - Coming Soon!</Text>
    </View>
  );
};

export default LoginScreen;

# ==== ./mobile-app/src/screens/WelcomeScreen.js ====

import React from 'react';
import { View, Text } from 'react-native';

const WelcomeScreen = () => {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Welcome Screen - Coming Soon!</Text>
    </View>
  );
};

export default WelcomeScreen;

# ==== ./mobile-app/src/services/api.js ====

import AsyncStorage from '@react-native-async-storage/async-storage';

const API_URL = 'http://localhost:3001/api';

class ApiService {
  async getAuthHeader() {
    const token = await AsyncStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
    };
  }

  async request(endpoint, options = {}) {
    const url = `${API_URL}${endpoint}`;
    const headers = await this.getAuthHeader();

    try {
      const response = await fetch(url, {
        ...options,
        headers: {
          ...headers,
          ...options.headers,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }
}

const apiService = new ApiService();

export const authAPI = {
  login: (credentials) =>
    apiService.request('/auth/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    }),

  register: (userData) =>
    apiService.request('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData),
    }),
};

export const memberAPI = {
  getProfile: () => apiService.request('/members/profile'),
  
  updateProfile: (profileData) =>
    apiService.request('/members/profile', {
      method: 'PUT',
      body: JSON.stringify(profileData),
    }),

  getAllMembers: () => apiService.request('/members'),
  
  getMemberById: (id) => apiService.request(`/members/${id}`),
  
  updateMemberRole: (id, role) =>
    apiService.request(`/members/${id}/role`, {
      method: 'PUT',
      body: JSON.stringify({ role }),
    }),
};

# ==== ./.expo/settings.json ====

{
  "hostType": "lan",
  "lanType": "ip",
  "dev": true,
  "minify": false,
  "urlRandomness": null,
  "https": false
}


# ==== ./backend/server.js ====

// backend/server.js - FIXED VERSION
const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const { sequelize } = require('./config/database');

// Import models to ensure associations are loaded
require('./models/index');

const authRoutes = require('./routes/auth');
const memberRoutes = require('./routes/members');
const eventRoutes = require('./routes/events');

const app = express(); // ← This line must come BEFORE any app.use() calls
const PORT = process.env.PORT || 5000;

console.log('🚀 Starting server...');

// CORS configuration
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  credentials: false
}));

app.options('*', cors());

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Debug middleware for attendance requests (MOVED AFTER app creation)
app.use('/api/events/attendance', (req, res, next) => {
  console.log('🔍 Attendance API called:', {
    method: req.method,
    url: req.url,
    body: req.body,
    headers: {
      authorization: req.headers.authorization ? 'Bearer ***' : 'No auth',
      contentType: req.headers['content-type']
    }
  });
  next();
});

// Serve static files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    version: '1.1.0'
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Gorkha Janshakti Front API Server',
    status: 'Running',
    endpoints: {
      health: '/health',
      auth: '/api/auth',
      members: '/api/members',
      events: '/api/events'
    }
  });
});

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/members', memberRoutes);
app.use('/api/events', eventRoutes);

// Error handling middleware for attendance route
app.use('/api/events/attendance', (err, req, res, next) => {
  console.error('❌ Attendance API Error:', err);
  res.status(500).json({ 
    success: false, 
    message: 'Attendance API error', 
    error: err.message 
  });
});

// General error handling middleware
app.use((err, req, res, next) => {
  console.error('❌ Server error:', err);
  res.status(500).json({ 
    message: 'Internal server error',
    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
});

// 404 handler
app.use('*', (req, res) => {
  console.log(`❓ Route not found: ${req.method} ${req.originalUrl}`);
  res.status(404).json({ 
    message: 'Route not found',
    path: req.originalUrl,
    method: req.method
  });
});

// Start server
const startServer = async () => {
  try {
    console.log('🔌 Testing database connection...');
    await sequelize.authenticate();
    console.log('✅ Database connected successfully');

    console.log('📄 Syncing database...');
    await sequelize.sync({ alter: true });
    console.log('✅ Database synced');

    // Start listening
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log('🎉 Server started successfully!');
      console.log('🔗 Server running on:');
      console.log(`   - Local: http://localhost:${PORT}`);
      console.log(`   - Network: http://192.168.1.65:${PORT}`);
      console.log('📱 API Base URL: http://192.168.1.65:5000/api');
      console.log('🏥 Health Check: http://192.168.1.65:5000/health');
      console.log('📅 Events API: http://192.168.1.65:5000/api/events');
      console.log('='.repeat(50));
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('🛑 SIGTERM received, shutting down gracefully...');
      server.close(() => {
        console.log('✅ Process terminated');
      });
    });

  } catch (error) {
    console.error('❌ Server startup error:', error);
    process.exit(1);
  }
};

startServer();

# ==== ./backend/package.json ====

{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^17.2.1",
    "expo-barcode-scanner": "^13.0.1",
    "expo-camera": "~16.1.11",
    "expo-image-picker": "~16.1.4",
    "express": "^4.18.2",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "html-pdf": "^3.0.1",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "nodemailer": "^7.0.6",
    "puppeteer": "^24.18.0",
    "qrcode": "^1.5.4",
    "react-native-qrcode-svg": "^6.3.15",
    "react-native-svg": "^15.12.1",
    "sequelize": "^6.37.7",
    "sqlite3": "^5.1.7",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.10"
  }
}


# ==== ./backend/debug-events.js ====

// Create this file: backend/debug-events.js
const { sequelize } = require('./config/database');
const Event = require('./models/Event');
const User = require('./models/User');

async function checkEvents() {
  try {
    await sequelize.authenticate();
    console.log('✅ Database connected');

    // Get all events with raw SQL
    const [results] = await sequelize.query('SELECT * FROM events');
    console.log('🔍 Raw events from database:', results);

    // Get events using model
    const events = await Event.findAll();
    console.log('📅 Events via model:', events.length);
    
    if (events.length > 0) {
      console.log('Event details:', events[0].toJSON());
    }

    // Check users
    const users = await User.findAll();
    console.log('👥 Users count:', users.length);
    
    if (users.length > 0) {
      console.log('First user:', users[0].fullName, users[0].role);
    }

    process.exit(0);
  } catch (error) {
    console.error('❌ Error:', error);
    process.exit(1);
  }
}

checkEvents();

# ==== ./backend/debug-server.js ====

// backend/debug-server.js - Temporary file to isolate the issue
const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

console.log('🔍 Debug server starting...');

// Basic middleware
app.use(cors());
app.use(express.json());

// Test basic route
app.get('/', (req, res) => {
  res.json({ message: 'Debug server working' });
});

// Test auth routes
console.log('Testing auth routes...');
try {
  const authRoutes = require('./routes/auth');
  app.use('/api/auth', authRoutes);
  console.log('✅ Auth routes loaded successfully');
} catch (error) {
  console.error('❌ Auth routes failed:', error.message);
}

// Test member routes
console.log('Testing member routes...');
try {
  const memberRoutes = require('./routes/members');
  app.use('/api/members', memberRoutes);
  console.log('✅ Member routes loaded successfully');
} catch (error) {
  console.error('❌ Member routes failed:', error.message);
}

app.listen(PORT, () => {
  console.log(`🎉 Debug server running on port ${PORT}`);
});


# ==== ./backend/middleware/auth.js ====

// backend/middleware/auth.js - CLEANED VERSION
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const auth = async (req, res, next) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ message: 'No token, authorization denied' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findByPk(decoded.id, {
      attributes: { exclude: ['password'] }
    });
    
    if (!user) {
      return res.status(401).json({ message: 'Token is not valid' });
    }

    req.user = user;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

// Admin and Organizer access (for most admin features)
const adminAuth = (req, res, next) => {
  if (req.user.role !== 'admin' && req.user.role !== 'organizer') {
    return res.status(403).json({ message: 'Access denied. Admin/Organizer only.' });
  }
  next();
};

// STRICT admin-only access for sensitive operations like delete
const adminOnlyAuth = (req, res, next) => {
  if (req.user && req.user.role === 'admin') {
    next();
  } else {
    res.status(403).json({ 
      message: 'Access denied. Admin privileges required for this operation.',
      userRole: req.user?.role 
    });
  }
};

module.exports = { auth, adminAuth, adminOnlyAuth };

# ==== ./backend/config/database.js ====

const { Sequelize } = require('sequelize');
const path = require('path');

// SQLite database file will be created automatically
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: path.join(__dirname, '../database.sqlite'),
  logging: false, // Set to console.log to see SQL queries
});

const connectDB = async () => {
  try {
    await sequelize.authenticate();
    console.log('SQLite database connected successfully');
    
    // Sync all models
    await sequelize.sync({ alter: true });
    console.log('Database tables created/updated');
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

module.exports = { sequelize, connectDB };

# ==== ./backend/models/Attendance.js ====

// Create this file: backend/models/Attendance.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const Attendance = sequelize.define('Attendance', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  userId: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id',
    },
  },
  eventId: {
    type: DataTypes.UUID,
    allowNull: true, // Can be null for location-only attendance
    references: {
      model: 'events',
      key: 'id',
    },
  },
  location: {
    type: DataTypes.STRING,
    allowNull: false, // Required field
  },
  attendanceType: {
    type: DataTypes.ENUM('event', 'location_visit'),
    allowNull: false,
  },
  checkInTime: {
    type: DataTypes.DATE,
    defaultValue: DataTypes.NOW,
  },
  checkOutTime: {
    type: DataTypes.DATE,
    allowNull: true,
  },
  markedBy: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id',
    },
  },
  notes: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  status: {
    type: DataTypes.ENUM('present', 'late', 'early_departure'),
    defaultValue: 'present',
  },
}, {
  tableName: 'attendances',
  timestamps: true,
});

module.exports = Attendance;

# ==== ./backend/models/Event.js ====

// backend/models/Event.js
const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');

const Event = sequelize.define('Event', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  title: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  eventDate: {
    type: DataTypes.DATE,
    allowNull: false,
  },
  startTime: {
    type: DataTypes.TIME,
    allowNull: false,
  },
  endTime: {
    type: DataTypes.TIME,
    allowNull: true,
  },
  location: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  eventType: {
    type: DataTypes.ENUM('meeting', 'rally', 'conference', 'community_service', 'training', 'other'),
    defaultValue: 'meeting',
  },
  maxAttendees: {
    type: DataTypes.INTEGER,
    allowNull: true,
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true,
  },
  createdBy: {
    type: DataTypes.UUID,
    allowNull: false,
    references: {
      model: 'users',
      key: 'id',
    },
  },
  qrCode: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
  qrCodeData: {
    type: DataTypes.TEXT,
    allowNull: true,
  },
}, {
  tableName: 'events',
  timestamps: true,
});

module.exports = Event;

# ==== ./backend/models/User.js ====

const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const bcrypt = require('bcryptjs');

const User = sequelize.define('User', {
  id: {
    type: DataTypes.UUID,
    defaultValue: DataTypes.UUIDV4,
    primaryKey: true,
  },
  membershipId: {
    type: DataTypes.STRING,
    unique: true,
    allowNull: false,
  },
  
  // Existing fields (keeping your structure)
  fullName: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  fatherName: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  address: {
    type: DataTypes.TEXT,
    allowNull: false,
  },
  phone: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
  },
  dateOfBirth: {
    type: DataTypes.DATE,
    allowNull: false,
  },
  occupation: {
    type: DataTypes.STRING,
  },
  constituency: {
    type: DataTypes.STRING,
  },
  profilePhoto: {
    type: DataTypes.STRING,
  },
  role: {
    type: DataTypes.ENUM('member', 'organizer', 'admin'),
    defaultValue: 'member',
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  qrCode: {
    type: DataTypes.TEXT,
  },
  qrCodeData: {
    type: DataTypes.TEXT,
  },
  isVerified: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  },
  registeredBy: {
    type: DataTypes.UUID,
  },
  
  // FIXED Aadhar-specific fields with proper validation
  aadharNumber: {
    type: DataTypes.STRING(12),
    allowNull: true,
    validate: {
      // Custom validation that allows null/empty values but validates when present
      aadharValidation(value) {
        if (value && value.trim() !== '') {
          // Only validate if value is not empty
          if (value.length !== 12) {
            throw new Error('Aadhar number must be exactly 12 digits');
          }
          if (!/^\d{12}$/.test(value)) {
            throw new Error('Aadhar number must contain only digits');
          }
        }
      }
    }
  },
  aadharVerified: {
    type: DataTypes.BOOLEAN,
    defaultValue: false
  },
  aadharVerificationDate: {
    type: DataTypes.DATE,
    allowNull: true
  },
  
  // Additional fields for enhanced registration
  gender: {
    type: DataTypes.STRING,
    allowNull: true
  },
  city: {
    type: DataTypes.STRING,
    allowNull: true
  },
  state: {
    type: DataTypes.STRING,
    allowNull: true
  },
  pincode: {
    type: DataTypes.STRING,
    allowNull: true
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    defaultValue: true
  }
}, {
  tableName: 'users',
  timestamps: true,
  hooks: {
    beforeCreate: async (user) => {
      // Hash password if provided
      if (user.password) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
      }
      
      // Generate membership ID if not provided
      if (!user.membershipId) {
        const timestamp = Date.now().toString().slice(-6);
        const random = Math.random().toString(36).substring(2, 6).toUpperCase();
        user.membershipId = `GJF${timestamp}${random}`;
      }
      
      // Clean empty aadharNumber to null
      if (user.aadharNumber === '') {
        user.aadharNumber = null;
      }
      
      // Set Aadhar verification date if verified
      if (user.aadharVerified) {
        user.aadharVerificationDate = new Date();
      }
    },
    beforeUpdate: async (user) => {
      // Hash password if changed
      if (user.changed('password') && user.password) {
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(user.password, salt);
      }
      
      // Clean empty aadharNumber to null
      if (user.changed('aadharNumber') && user.aadharNumber === '') {
        user.aadharNumber = null;
      }
      
      // Update verification date if Aadhar status changed
      if (user.changed('aadharVerified') && user.aadharVerified) {
        user.aadharVerificationDate = new Date();
      }
    }
  }
});

// Instance method to check password
User.prototype.validatePassword = async function(password) {
  return await bcrypt.compare(password, this.password);
};

// Instance method to get public profile
User.prototype.getPublicProfile = function() {
  const { password, ...publicData } = this.toJSON();
  return {
    ...publicData,
    hasAadhar: !!this.aadharNumber,
    verificationStatus: this.aadharVerified ? 'verified' : 'unverified'
  };
};

module.exports = User;

# ==== ./backend/models/index.js ====

// backend/models/index.js - UPDATED with Attendance
const User = require('./User');
const Event = require('./Event');
const Attendance = require('./Attendance');

// Define associations
User.hasMany(Event, { 
  foreignKey: 'createdBy', 
  as: 'createdEvents' 
});

Event.belongsTo(User, { 
  foreignKey: 'createdBy', 
  as: 'creator' 
});

User.hasMany(Attendance, { 
  foreignKey: 'userId', 
  as: 'attendances' 
});

User.hasMany(Attendance, { 
  foreignKey: 'markedBy', 
  as: 'markedAttendances' 
});

Event.hasMany(Attendance, { 
  foreignKey: 'eventId', 
  as: 'attendances' 
});

Attendance.belongsTo(User, { 
  foreignKey: 'userId', 
  as: 'user' 
});

Attendance.belongsTo(User, { 
  foreignKey: 'markedBy', 
  as: 'marker' 
});

Attendance.belongsTo(Event, { 
  foreignKey: 'eventId', 
  as: 'event' 
});

module.exports = {
  User,
  Event,
  Attendance
};

# ==== ./backend/controllers/eventController.js ====

// backend/controllers/eventController.js - FIXED VERSION
const QRCode = require('qrcode');
const { Op } = require('sequelize');
const Event = require('../models/Event');
const Attendance = require('../models/Attendance');
const User = require('../models/User');

// Create event (Admin only)
const createEvent = async (req, res) => {
  try {
    const {
      title,
      description,
      eventDate,
      startTime,
      endTime,
      location,
      address,
      eventType,
      maxAttendees
    } = req.body;

    // DEBUG LOG
    console.log('🔍 Creating event with data:', {
      title,
      eventDate,
      startTime,
      location,
      createdBy: req.user?.id,
      userRole: req.user?.role
    });

    // Validate required fields
    if (!title || !eventDate || !startTime || !location) {
      console.log('❌ Validation failed - missing required fields');
      return res.status(400).json({ 
        message: 'Title, event date, start time, and location are required' 
      });
    }

    // Generate QR code data for event
    const qrCodeData = JSON.stringify({
      type: 'event',
      eventId: null, // Will be updated after creation
      title,
      eventDate,
      location,
      timestamp: Date.now()
    });

    console.log('📝 About to create event in database...');

    // Create event
    const event = await Event.create({
      title,
      description,
      eventDate,
      startTime,
      endTime,
      location,
      address,
      eventType: eventType || 'meeting',
      maxAttendees,
      createdBy: req.user.id,
      qrCodeData
    });

    console.log('✅ Event created with ID:', event.id);

    // Update QR code data with actual event ID
    const updatedQrCodeData = JSON.stringify({
      type: 'event',
      eventId: event.id,
      title,
      eventDate,
      location,
      timestamp: Date.now()
    });

    // Generate QR code
    const qrCodeUrl = await QRCode.toDataURL(updatedQrCodeData);

    // Update event with QR code
    await event.update({
      qrCode: qrCodeUrl,
      qrCodeData: updatedQrCodeData
    });

    console.log('✅ Event updated with QR code');

    res.status(201).json({
      success: true,
      message: 'Event created successfully',
      event: {
        id: event.id,
        title: event.title,
        description: event.description,
        eventDate: event.eventDate,
        startTime: event.startTime,
        endTime: event.endTime,
        location: event.location,
        address: event.address,
        eventType: event.eventType,
        maxAttendees: event.maxAttendees,
        isActive: event.isActive,
        qrCode: event.qrCode,
        createdBy: event.createdBy,
        createdAt: event.createdAt
      }
    });
  } catch (error) {
    console.error('❌ Error creating event:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Get all events
const getAllEvents = async (req, res) => {
  try {
    const { active, upcoming, past } = req.query;
    
    let whereCondition = {};
    
    if (active === 'true') {
      whereCondition.isActive = true;
    }
    
    if (upcoming === 'true') {
      whereCondition.eventDate = {
        [Op.gte]: new Date()
      };
    }
    
    if (past === 'true') {
      whereCondition.eventDate = {
        [Op.lt]: new Date()
      };
    }

    const events = await Event.findAll({
      where: whereCondition,
      include: [
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'fullName', 'role']
        },
        {
          model: Attendance,
          as: 'attendances',
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'fullName', 'membershipId']
            }
          ]
        }
      ],
      order: [['eventDate', 'ASC']]
    });

    const formattedEvents = events.map(event => ({
      id: event.id,
      title: event.title,
      description: event.description,
      eventDate: event.eventDate,
      startTime: event.startTime,
      endTime: event.endTime,
      location: event.location,
      address: event.address,
      eventType: event.eventType,
      maxAttendees: event.maxAttendees,
      isActive: event.isActive,
      qrCode: event.qrCode,
      createdBy: event.createdBy,
      creator: event.creator,
      attendanceCount: event.attendances ? event.attendances.length : 0,
      attendances: event.attendances || [],
      createdAt: event.createdAt,
      updatedAt: event.updatedAt
    }));

    res.json({
      success: true,
      events: formattedEvents,
      total: formattedEvents.length
    });
  } catch (error) {
    console.error('❌ Error fetching events:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Get single event
const getEvent = async (req, res) => {
  try {
    const { id } = req.params;

    const event = await Event.findByPk(id, {
      include: [
        {
          model: User,
          as: 'creator',
          attributes: ['id', 'fullName', 'role']
        },
        {
          model: Attendance,
          as: 'attendances',
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'fullName', 'membershipId', 'phone', 'email']
            },
            {
              model: User,
              as: 'marker',
              attributes: ['id', 'fullName']
            }
          ]
        }
      ]
    });

    if (!event) {
      return res.status(404).json({ 
        success: false,
        message: 'Event not found' 
      });
    }

    res.json({
      success: true,
      event: {
        id: event.id,
        title: event.title,
        description: event.description,
        eventDate: event.eventDate,
        startTime: event.startTime,
        endTime: event.endTime,
        location: event.location,
        address: event.address,
        eventType: event.eventType,
        maxAttendees: event.maxAttendees,
        isActive: event.isActive,
        qrCode: event.qrCode,
        createdBy: event.createdBy,
        creator: event.creator,
        attendances: event.attendances || [],
        attendanceCount: event.attendances ? event.attendances.length : 0,
        createdAt: event.createdAt,
        updatedAt: event.updatedAt
      }
    });
  } catch (error) {
    console.error('❌ Error fetching event:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Update event (Admin only)
const updateEvent = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    const event = await Event.findByPk(id);
    if (!event) {
      return res.status(404).json({ 
        success: false,
        message: 'Event not found' 
      });
    }

    await event.update(updateData);

    console.log('✅ Event updated:', event.id);

    res.json({
      success: true,
      message: 'Event updated successfully',
      event
    });
  } catch (error) {
    console.error('❌ Error updating event:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Delete event (Admin only)
const deleteEvent = async (req, res) => {
  try {
    const { id } = req.params;

    const event = await Event.findByPk(id);
    if (!event) {
      return res.status(404).json({ 
        success: false,
        message: 'Event not found' 
      });
    }

    await event.destroy();

    console.log('✅ Event deleted:', id);

    res.json({
      success: true,
      message: 'Event deleted successfully'
    });
  } catch (error) {
    console.error('❌ Error deleting event:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

module.exports = {
  createEvent,
  getAllEvents,
  getEvent,
  updateEvent,
  deleteEvent
};

# ==== ./backend/controllers/memberController.js ====

// File: backend/controllers/memberController.js - COMPLETE FIXED VERSION

const User = require('../models/User');
const { sendRoleUpdateEmail } = require('../services/emailService');

const getProfile = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.id, {
      attributes: { exclude: ['password'] } // Only exclude password, include qrCodeData for mobile app
    });
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    // 🔥 FIXED: Return consistent structure that works with mobile app
    const profileData = {
      id: user.id,
      membershipId: user.membershipId,
      name: user.fullName,        // For backward compatibility
      fullName: user.fullName,    // Primary field
      fatherName: user.fatherName,
      email: user.email,
      phone: user.phone,
      dateOfBirth: user.dateOfBirth,
      occupation: user.occupation,
      address: user.address,
      city: user.city,
      state: user.state,
      pincode: user.pincode,
      constituency: user.constituency,
      gender: user.gender,
      role: user.role,
      isVerified: user.isVerified,
      isActive: user.isActive,
      profilePhoto: user.profilePhoto,
      qrCode: user.qrCode,
      qrCodeData: user.qrCodeData,
      aadharNumber: user.aadharNumber,
      aadharVerified: user.aadharVerified,
      aadharVerificationDate: user.aadharVerificationDate,
      registeredBy: user.registeredBy,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
    };
    
    res.json(profileData);
  } catch (error) {
    console.error('❌ Error getting profile:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

const getAllMembers = async (req, res) => {
  try {
    const members = await User.findAll({
      attributes: { exclude: ['password'] },
      order: [['createdAt', 'DESC']]
    });
    
    // 🔥 FIXED: Transform to structure that works with mobile app components
    const transformedMembers = members.map(member => ({
      // Direct fields (for new components)
      id: member.id,
      _id: member.id, // For components expecting _id
      membershipId: member.membershipId,
      name: member.fullName,
      fullName: member.fullName,
      role: member.role,
      email: member.email,
      phone: member.phone,
      isVerified: member.isVerified,
      isActive: member.isActive,
      profilePhoto: member.profilePhoto,
      createdAt: member.createdAt,
      
      // PersonalInfo structure (for components expecting nested structure)
      personalInfo: {
        fullName: member.fullName,
        fatherName: member.fatherName,
        email: member.email,
        phone: member.phone,
        dateOfBirth: member.dateOfBirth,
        gender: member.gender,
        occupation: member.occupation,
        address: member.address,
        city: member.city,
        state: member.state,
        pincode: member.pincode,
        constituency: member.constituency,
        aadharNumber: member.aadharNumber,
        aadharVerified: member.aadharVerified,
      },
      
      // All other fields
      fatherName: member.fatherName,
      dateOfBirth: member.dateOfBirth,
      occupation: member.occupation,
      address: member.address,
      city: member.city,
      state: member.state,
      pincode: member.pincode,
      constituency: member.constituency,
      gender: member.gender,
      aadharNumber: member.aadharNumber,
      aadharVerified: member.aadharVerified,
      aadharVerificationDate: member.aadharVerificationDate,
      qrCode: member.qrCode,
      registeredBy: member.registeredBy,
      updatedAt: member.updatedAt,
    }));
    
    res.json(transformedMembers);
  } catch (error) {
    console.error('❌ Error getting all members:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

const scanQRCode = async (req, res) => {
  try {
    const { qrData } = req.body;
    
    const parsedData = JSON.parse(qrData);
    const user = await User.findOne({ 
      where: { membershipId: parsedData.membershipId },
      attributes: { exclude: ['password'] }
    });
    
    if (!user) {
      return res.status(404).json({ message: 'Member not found' });
    }

    // 🔥 FIXED: Return consistent member data for scanner
    const memberData = {
      id: user.id,
      membershipId: user.membershipId,
      name: user.fullName,
      fullName: user.fullName,
      phone: user.phone,
      email: user.email,
      role: user.role,
      constituency: user.constituency,
      profilePhoto: user.profilePhoto,
      isVerified: user.isVerified,
      isActive: user.isActive,
      createdAt: user.createdAt,
      joinDate: user.createdAt // Alias for compatibility
    };

    res.json({
      success: true,
      member: memberData
    });
  } catch (error) {
    console.error('❌ QR scan error:', error);
    res.status(500).json({ message: 'Invalid QR Code', error: error.message });
  }
};

const updateMemberRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    console.log('🔄 Role update request:', { memberId: id, newRole: role, requestedBy: req.user.id });

    if (!['member', 'organizer', 'admin'].includes(role)) {
      return res.status(400).json({ message: 'Invalid role specified' });
    }

    const user = await User.findByPk(id);
    if (!user) {
      return res.status(404).json({ message: 'Member not found' });
    }

    // Prevent users from updating their own role
    if (user.id === req.user.id) {
      return res.status(403).json({ message: 'Cannot update your own role' });
    }

    // Only admins can create other admins
    if (role === 'admin' && req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Only admins can assign admin role' });
    }

    const oldRole = user.role;
    await user.update({ role });

    console.log('✅ Role updated:', { member: user.fullName, from: oldRole, to: role });

    // Send email notification
    if (oldRole !== role) {
      const emailData = {
        name: user.fullName,
        email: user.email,
        membershipId: user.membershipId,
      };
      
      sendRoleUpdateEmail(emailData, role).catch(error => {
        console.error('Failed to send role update email:', error);
      });
    }

    res.json({
      success: true,
      message: 'Role updated successfully',
      member: {
        id: user.id,
        name: user.fullName,
        fullName: user.fullName,
        email: user.email,
        membershipId: user.membershipId,
        role: user.role,
        oldRole,
        newRole: role
      }
    });
  } catch (error) {
    console.error('❌ Error updating role:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

const deleteMember = async (req, res) => {
  try {
    const { id } = req.params;
    const { confirmationText } = req.body;

    console.log('🗑️ Delete request:', { memberId: id, requestedBy: req.user.id, confirmation: confirmationText });

    if (!id) {
      return res.status(400).json({ message: 'Member ID is required' });
    }

    if (confirmationText !== 'DELETE MEMBER') {
      return res.status(400).json({ 
        message: 'Confirmation text required. Type "DELETE MEMBER" to confirm.',
        received: confirmationText,
        expected: 'DELETE MEMBER'
      });
    }

    const member = await User.findByPk(id);
    
    if (!member) {
      // Try finding by membership ID as fallback
      const memberByMembershipId = await User.findOne({ 
        where: { membershipId: id } 
      });
      if (memberByMembershipId) {
        return res.status(400).json({ 
          message: 'Please use the database ID, not membership ID',
          hint: `Database ID for ${memberByMembershipId.fullName} is: ${memberByMembershipId.id}`
        });
      }
      return res.status(404).json({ message: 'Member not found' });
    }

    if (member.id === req.user.id) {
      return res.status(400).json({ 
        message: 'Cannot delete your own account' 
      });
    }

    if (member.role === 'admin' && req.user.role !== 'admin') {
      return res.status(403).json({ 
        message: 'Cannot delete admin accounts' 
      });
    }

    const memberInfo = {
      id: member.id,
      name: member.fullName,
      fullName: member.fullName,
      membershipId: member.membershipId,
      email: member.email,
      role: member.role
    };
    
    await member.destroy();

    console.log('✅ Member deleted:', memberInfo);

    res.json({
      success: true,
      message: 'Member deleted successfully',
      deletedMember: memberInfo,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('❌ Error deleting member:', error);
    
    res.status(500).json({ 
      success: false,
      message: 'Server error occurred while deleting member', 
      error: error.message,
      errorType: error.name,
      timestamp: new Date().toISOString()
    });
  }
};

// 🔥 COMPREHENSIVE FIXED updateProfile function
const updateProfile = async (req, res) => {
  try {
    const userId = req.user.id;
    const updateData = req.body;

    console.log('📝 Profile update request:', { 
      userId, 
      fields: Object.keys(updateData),
      aadharProvided: !!(updateData.aadharNumber || updateData.aadhaarNumber)
    });

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    // 🔥 Helper function to clean empty strings to null
    const cleanEmptyString = (value) => {
      if (typeof value === 'string' && value.trim() === '') {
        return null;
      }
      return value;
    };

    // 🔥 NORMALIZE: Handle both aadhar/aadhaar spellings
    if (updateData.aadhaarNumber !== undefined && updateData.aadharNumber === undefined) {
      updateData.aadharNumber = updateData.aadhaarNumber;
    }

    // Prepare clean update data
    const cleanUpdateData = {};
    
    // Handle all possible fields
    const fieldMappings = {
      fullName: 'fullName',
      fatherName: 'fatherName',
      address: 'address',
      phone: 'phone',
      email: 'email',
      dateOfBirth: 'dateOfBirth',
      occupation: 'occupation',
      constituency: 'constituency',
      gender: 'gender',
      city: 'city',
      state: 'state',
      pincode: 'pincode',
      aadharNumber: 'aadharNumber'
    };

    // Process each field
    Object.entries(fieldMappings).forEach(([key, dbField]) => {
      if (updateData[key] !== undefined) {
        cleanUpdateData[dbField] = cleanEmptyString(updateData[key]);
      }
    });

    // Handle profile photo
    if (req.file) {
      cleanUpdateData.profilePhoto = `uploads/${req.file.filename}`;
    }

    console.log('🧹 Cleaned update data:', cleanUpdateData);

    await user.update(cleanUpdateData);

    const updatedUser = await User.findByPk(userId, {
      attributes: { exclude: ['password'] }
    });

    console.log('✅ Profile updated successfully');

    // 🔥 Return consistent structure
    const responseData = {
      id: updatedUser.id,
      membershipId: updatedUser.membershipId,
      name: updatedUser.fullName,
      fullName: updatedUser.fullName,
      fatherName: updatedUser.fatherName,
      email: updatedUser.email,
      phone: updatedUser.phone,
      dateOfBirth: updatedUser.dateOfBirth,
      occupation: updatedUser.occupation,
      address: updatedUser.address,
      city: updatedUser.city,
      state: updatedUser.state,
      pincode: updatedUser.pincode,
      constituency: updatedUser.constituency,
      gender: updatedUser.gender,
      role: updatedUser.role,
      isVerified: updatedUser.isVerified,
      isActive: updatedUser.isActive,
      profilePhoto: updatedUser.profilePhoto,
      qrCode: updatedUser.qrCode,
      qrCodeData: updatedUser.qrCodeData,
      aadharNumber: updatedUser.aadharNumber,
      aadharVerified: updatedUser.aadharVerified,
      aadharVerificationDate: updatedUser.aadharVerificationDate,
      registeredBy: updatedUser.registeredBy,
      createdAt: updatedUser.createdAt,
      updatedAt: updatedUser.updatedAt,
    };

    res.json({
      success: true,
      message: 'Profile updated successfully',
      profile: responseData,
      user: responseData // For backward compatibility
    });

  } catch (error) {
    console.error('❌ Error updating profile:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error occurred while updating profile', 
      error: error.message 
    });
  }
};

module.exports = { 
  getProfile, 
  getAllMembers, 
  scanQRCode, 
  updateMemberRole, 
  deleteMember,
  updateProfile 
};

# ==== ./backend/controllers/attendanceController.js ====

// backend/controllers/attendanceController.js - FIXED VERSION
const { Op } = require('sequelize');
const Attendance = require('../models/Attendance');
const Event = require('../models/Event');
const User = require('../models/User');

// Mark attendance via QR scan
const markAttendance = async (req, res) => {
  try {
    const { qrData, location, attendanceType = 'event', notes } = req.body;
    
    console.log('📋 Marking attendance:', { 
      markedBy: req.user.id, 
      location, 
      attendanceType,
      qrData: qrData?.substring(0, 10) + '...' // Only show first 10 chars for privacy
    });

    let parsedQrData;
    try {
      parsedQrData = JSON.parse(qrData);
    } catch (error) {
      // If QR data is just membershipId (simple QR)
      parsedQrData = { membershipId: qrData };
    }

    // Find the user whose attendance is being marked
    const user = await User.findOne({
      where: { membershipId: parsedQrData.membershipId },
      attributes: { exclude: ['password'] }
    });

    if (!user) {
      console.log('❌ Member not found:', parsedQrData.membershipId);
      return res.status(404).json({ 
        success: false,
        message: 'Member not found' 
      });
    }

    console.log('👤 Found member:', user.fullName, '- ID:', user.membershipId);

    // Handle event attendance
    let eventId = null;
    let finalLocation = location || 'Event Location'; // DEFAULT LOCATION FIX
    
    if (attendanceType === 'event' && parsedQrData.eventId) {
      const event = await Event.findByPk(parsedQrData.eventId);
      if (!event) {
        return res.status(404).json({ 
          success: false,
          message: 'Event not found' 
        });
      }
      eventId = event.id;
      finalLocation = event.location || 'Event Location'; // Use event location
      
      console.log('📅 Event found:', event.title, 'at', finalLocation);
      
      // Check if already marked for this event
      const existingAttendance = await Attendance.findOne({
        where: {
          userId: user.id,
          eventId: eventId
        }
      });

      if (existingAttendance) {
        return res.status(400).json({ 
          success: false,
          message: 'Attendance already marked for this event',
          attendance: existingAttendance
        });
      }
    } else if (attendanceType === 'event') {
      // For event attendance without specific event ID, use generic location
      finalLocation = location || 'Event Location';
    } else {
      // For location visits, location should be provided
      if (!location) {
        return res.status(400).json({
          success: false,
          message: 'Location is required for location visits'
        });
      }
      finalLocation = location;
    }

    // Determine status based on timing (for events)
    let status = 'present';
    if (eventId) {
      const event = await Event.findByPk(eventId);
      const eventDateTime = new Date(`${event.eventDate.toDateString()} ${event.startTime}`);
      const currentTime = new Date();
      
      if (currentTime > eventDateTime) {
        const lateDuration = currentTime - eventDateTime;
        if (lateDuration > 15 * 60 * 1000) { // 15 minutes late
          status = 'late';
        }
      }
    }

    console.log('💾 Creating attendance record:', {
      userId: user.id,
      eventId,
      location: finalLocation,
      attendanceType,
      status
    });

    // Create attendance record
    const attendance = await Attendance.create({
      userId: user.id,
      eventId,
      location: finalLocation, // This is now guaranteed to have a value
      attendanceType,
      checkInTime: new Date(),
      markedBy: req.user.id,
      notes,
      status
    });

    // Fetch complete attendance data with relations
    const completeAttendance = await Attendance.findByPk(attendance.id, {
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'fullName', 'membershipId', 'phone', 'email', 'role']
        },
        {
          model: User,
          as: 'marker',
          attributes: ['id', 'fullName', 'role']
        },
        {
          model: Event,
          as: 'event',
          attributes: ['id', 'title', 'eventDate', 'location']
        }
      ]
    });

    console.log('✅ Attendance marked successfully for:', user.fullName);

    res.json({
      success: true,
      message: `Attendance marked successfully for ${user.fullName}`,
      attendance: completeAttendance
    });
  } catch (error) {
    console.error('❌ Error marking attendance:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Get attendance records
const getAttendanceRecords = async (req, res) => {
  try {
    const { 
      eventId, 
      location, 
      userId, 
      startDate, 
      endDate,
      attendanceType,
      page = 1,
      limit = 50 
    } = req.query;

    let whereCondition = {};
    
    if (eventId) whereCondition.eventId = eventId;
    if (location) whereCondition.location = location;
    if (userId) whereCondition.userId = userId;
    if (attendanceType) whereCondition.attendanceType = attendanceType;
    
    if (startDate && endDate) {
      whereCondition.checkInTime = {
        [Op.between]: [new Date(startDate), new Date(endDate)]
      };
    }

    const offset = (page - 1) * limit;

    const { count, rows: attendances } = await Attendance.findAndCountAll({
      where: whereCondition,
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'fullName', 'membershipId', 'phone', 'role']
        },
        {
          model: User,
          as: 'marker',
          attributes: ['id', 'fullName', 'role']
        },
        {
          model: Event,
          as: 'event',
          attributes: ['id', 'title', 'eventDate', 'location'],
          required: false
        }
      ],
      order: [['checkInTime', 'DESC']],
      limit: parseInt(limit),
      offset
    });

    res.json({
      success: true,
      attendances,
      pagination: {
        total: count,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(count / limit)
      }
    });
  } catch (error) {
    console.error('❌ Error fetching attendance records:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Get attendance summary/statistics
const getAttendanceStats = async (req, res) => {
  try {
    const { eventId, startDate, endDate } = req.query;

    let whereCondition = {};
    
    if (eventId) whereCondition.eventId = eventId;
    
    if (startDate && endDate) {
      whereCondition.checkInTime = {
        [Op.between]: [new Date(startDate), new Date(endDate)]
      };
    }

    // Get total attendance count
    const totalAttendance = await Attendance.count({
      where: whereCondition
    });

    // Get attendance by location
    const attendanceByLocation = await Attendance.findAll({
      attributes: [
        'location',
        [Attendance.sequelize.fn('COUNT', Attendance.sequelize.col('id')), 'count']
      ],
      where: whereCondition,
      group: ['location'],
      raw: true
    });

    // Get attendance by type
    const attendanceByType = await Attendance.findAll({
      attributes: [
        'attendanceType',
        [Attendance.sequelize.fn('COUNT', Attendance.sequelize.col('id')), 'count']
      ],
      where: whereCondition,
      group: ['attendanceType'],
      raw: true
    });

    // Get top attendees
    const topAttendees = await Attendance.findAll({
      attributes: [
        'userId',
        [Attendance.sequelize.fn('COUNT', Attendance.sequelize.col('Attendance.id')), 'attendanceCount']
      ],
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['fullName', 'membershipId', 'role']
        }
      ],
      where: whereCondition,
      group: ['userId'],
      order: [[Attendance.sequelize.literal('attendanceCount'), 'DESC']],
      limit: 10
    });

    res.json({
      success: true,
      stats: {
        totalAttendance,
        attendanceByLocation,
        attendanceByType,
        topAttendees
      }
    });
  } catch (error) {
    console.error('❌ Error fetching attendance stats:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

// Mark checkout (for location visits)
const markCheckout = async (req, res) => {
  try {
    const { attendanceId } = req.params;
    const { notes } = req.body;

    const attendance = await Attendance.findByPk(attendanceId, {
      include: [
        {
          model: User,
          as: 'user',
          attributes: ['id', 'fullName', 'membershipId']
        }
      ]
    });

    if (!attendance) {
      return res.status(404).json({ 
        success: false,
        message: 'Attendance record not found' 
      });
    }

    if (attendance.checkOutTime) {
      return res.status(400).json({ 
        success: false,
        message: 'Checkout already marked' 
      });
    }

    await attendance.update({
      checkOutTime: new Date(),
      notes: notes || attendance.notes
    });

    console.log('✅ Checkout marked for:', attendance.user.fullName);

    res.json({
      success: true,
      message: 'Checkout marked successfully',
      attendance
    });
  } catch (error) {
    console.error('❌ Error marking checkout:', error);
    res.status(500).json({ 
      success: false,
      message: 'Server error', 
      error: error.message 
    });
  }
};

module.exports = {
  markAttendance,
  getAttendanceRecords,
  getAttendanceStats,
  markCheckout
};

# ==== ./backend/controllers/authController.js ====

// backend/controllers/authController.js - FIXED VERSION with consistent field names
const bcryptjs = require('bcryptjs'); 
const jwt = require('jsonwebtoken');
const { Op } = require('sequelize');
const User = require('../models/User');
const QRCode = require('qrcode');

const register = async (req, res) => {
  try {
    const { 
      fullName, 
      fatherName, 
      email, 
      phone,
      dateOfBirth,
      occupation,
      address,
      constituency,
      password,
      verificationMethod,
      // 🔥 FIXED: Accept both spellings and normalize to backend format
      aadharNumber: reqAadharNumber,
      aadhaarNumber: reqAadhaarNumber, // Alternative spelling from frontend
      aadharVerified: reqAadharVerified,
      aadhaarVerified: reqAadhaarVerified,
      gender,
      city,
      state,
      pincode
    } = req.body;

    console.log('📝 Registration request:', { 
      fullName, 
      email, 
      verificationMethod,
      aadharProvided: !!(reqAadharNumber || reqAadhaarNumber)
    });

    // Validate required fields
    if (!fullName || !email || !password) {
      return res.status(400).json({ message: 'Full name, email, and password are required' });
    }

    // 🔥 NORMALIZE: Handle both aadhar/aadhaar spellings
    const aadharNumber = reqAadharNumber || reqAadhaarNumber || null;
    const aadharVerified = reqAadharVerified || reqAadhaarVerified || false;

    // Check if user already exists
    const existingUser = await User.findOne({ 
      where: {
        [Op.or]: [
          { email },
          ...(phone ? [{ phone }] : []),
          ...(aadharNumber ? [{ aadharNumber }] : [])
        ]
      }
    });

    if (existingUser) {
      if (existingUser.email === email) {
        return res.status(400).json({ message: 'User with this email already exists' });
      }
      if (existingUser.phone === phone) {
        return res.status(400).json({ message: 'User with this phone number already exists' });
      }
      if (existingUser.aadharNumber === aadharNumber) {
        return res.status(400).json({ message: 'User with this Aadhar number already exists' });
      }
    }

    // Hash password
    const hashedPassword = await bcryptjs.hash(password, 12);

    // Generate unique membership ID
    const membershipId = `GJF${Date.now().toString().slice(-6)}${Math.floor(Math.random() * 100).toString().padStart(2, '0')}`;

    // Handle profile photo
    let profilePhotoPath = null;
    if (req.file) {
      profilePhotoPath = req.file.path.replace(/\\/g, '/');
    }

    // Generate QR code data
    const qrCodeData = JSON.stringify({
      membershipId,
      name: fullName,
      email,
      phone: phone || '',
      id: require('uuid').v4()
    });

    // Generate QR code
    const qrCodeUrl = await QRCode.toDataURL(qrCodeData);

    // Create user with cleaned data
    const user = await User.create({
      membershipId,
      fullName,
      fatherName,
      email,
      phone,
      dateOfBirth,
      occupation,
      address,
      constituency,
      password: hashedPassword,
      profilePhoto: profilePhotoPath,
      qrCode: qrCodeUrl,
      qrCodeData,
      role: 'member',
      isVerified: aadharVerified === 'true' || aadharVerified === true,
      isActive: true,
      aadharNumber: aadharNumber || null,
      aadharVerified: aadharVerified === 'true' || aadharVerified === true,
      aadharVerificationDate: (aadharVerified === 'true' || aadharVerified === true) ? new Date() : null,
      gender: gender || null,
      city: city || null,
      state: state || null,
      pincode: pincode || null
    });

    // Generate JWT token
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '30d' });

    console.log('✅ Registration successful for:', user.email);

    res.status(201).json({
      message: 'Registration successful! Check your email for membership card.',
      token,
      user: {
        id: user.id,
        membershipId: user.membershipId,
        name: user.fullName,        // For backward compatibility
        fullName: user.fullName,    // Primary field
        email: user.email,
        phone: user.phone,
        role: user.role,
        isVerified: user.isVerified,
        profilePhoto: user.profilePhoto,
        qrCode: user.qrCode,
        // Include all user fields for consistency
        fatherName: user.fatherName,
        dateOfBirth: user.dateOfBirth,
        occupation: user.occupation,
        address: user.address,
        constituency: user.constituency,
        gender: user.gender,
        city: user.city,
        state: user.state,
        pincode: user.pincode,
        aadharNumber: user.aadharNumber,
        aadharVerified: user.aadharVerified,
        isActive: user.isActive,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt
      }
    });
  } catch (error) {
    console.error('❌ Registration error:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

const login = async (req, res) => {
  try {
    const { identifier, password } = req.body;

    console.log('🔐 Login attempt for:', identifier ? identifier.substring(0, 3) + '***' : 'missing');

    // Validate input
    if (!identifier || !password) {
      return res.status(400).json({ message: 'Email/phone and password are required' });
    }

    // Find user by email OR phone number
    const user = await User.findOne({ 
      where: {
        [Op.or]: [
          { email: identifier },
          { phone: identifier }
        ]
      }
    });

    if (!user) {
      console.log('❌ User not found for identifier:', identifier);
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    console.log('👤 User found:', { 
      id: user.id, 
      email: user.email, 
      role: user.role,
      isActive: user.isActive 
    });

    // Check password
    const isMatch = await bcryptjs.compare(password, user.password);
    if (!isMatch) {
      console.log('❌ Password mismatch for user:', user.email);
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Check if user is active
    if (!user.isActive) {
      return res.status(400).json({ message: 'Account is deactivated. Please contact admin.' });
    }

    // Generate JWT token
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '30d' });

    console.log('✅ Login successful for:', user.email);

    // 🔥 FIXED: Return consistent, complete user object
    res.json({
      message: 'Login successful',
      token,
      user: {
        id: user.id,
        membershipId: user.membershipId,
        name: user.fullName,        // For backward compatibility
        fullName: user.fullName,    // Primary field
        fatherName: user.fatherName,
        email: user.email,
        phone: user.phone,
        dateOfBirth: user.dateOfBirth,
        occupation: user.occupation,
        address: user.address,
        city: user.city,
        state: user.state,
        pincode: user.pincode,
        constituency: user.constituency,
        gender: user.gender,
        role: user.role,
        isVerified: user.isVerified,
        isActive: user.isActive,
        profilePhoto: user.profilePhoto,
        qrCode: user.qrCode,
        qrCodeData: user.qrCodeData,
        aadharNumber: user.aadharNumber,
        aadharVerified: user.aadharVerified,
        aadharVerificationDate: user.aadharVerificationDate,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      }
    });
  } catch (error) {
    console.error('🚨 Login error:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

module.exports = { register, login };

# ==== ./backend/routes/events.js ====

// backend/routes/events.js - COMPLETE with attendance routes
const express = require('express');
const { auth, adminAuth, adminOnlyAuth } = require('../middleware/auth');
const { 
  createEvent, 
  getAllEvents, 
  getEvent, 
  updateEvent, 
  deleteEvent 
} = require('../controllers/eventController');
const {
  markAttendance,
  getAttendanceRecords,
  getAttendanceStats,
  markCheckout
} = require('../controllers/attendanceController');

const router = express.Router();

// Test routes
router.get('/test', (req, res) => {
  console.log('🧪 Events test route called');
  res.json({
    success: true,
    message: 'Events API is working',
    timestamp: new Date()
  });
});

router.get('/test-auth', auth, (req, res) => {
  console.log('🧪 Events auth test route called by:', req.user?.fullName);
  res.json({
    success: true,
    message: 'Events auth is working',
    user: {
      id: req.user?.id,
      name: req.user?.fullName,
      role: req.user?.role
    },
    timestamp: new Date()
  });
});

// Event CRUD routes
router.post('/', auth, adminOnlyAuth, createEvent); // Admin only can create events
router.get('/', auth, getAllEvents); // All authenticated users can view events
router.get('/:id', auth, getEvent); // Get single event
router.put('/:id', auth, adminOnlyAuth, updateEvent); // Admin only can update
router.delete('/:id', auth, adminOnlyAuth, deleteEvent); // Admin only can delete

// Attendance routes
router.post('/attendance/mark', auth, adminAuth, markAttendance); // Admin/Organizer can mark attendance
router.get('/attendance/records', auth, adminAuth, getAttendanceRecords); // Admin/Organizer can view records
router.get('/attendance/stats', auth, adminAuth, getAttendanceStats); // Admin/Organizer can view stats
router.patch('/attendance/:attendanceId/checkout', auth, adminAuth, markCheckout); // Mark checkout

module.exports = router;

# ==== ./backend/routes/auth.js ====

// backend/routes/auth.js - COMPLETE FILE
const express = require('express');
const multer = require('multer');
const path = require('path');
const { register, login } = require('../controllers/authController');

const router = express.Router();

// Multer configuration for file upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Error handling middleware for multer
const uploadHandler = (req, res, next) => {
  upload.single('profilePhoto')(req, res, (err) => {
    if (err instanceof multer.MulterError) {
      // A multer error occurred during upload
      return res.status(400).json({ message: err.message });
    } else if (err) {
      // An unknown error occurred when uploading
      return res.status(500).json({ message: err.message });
    }
    // Everything went fine
    next();
  });
};

// Routes
router.post('/register', uploadHandler, register);
router.post('/login', login);

module.exports = router;

# ==== ./backend/routes/members.js ====

// backend/routes/members.js - COMPLETE FILE
const express = require('express');
const multer = require('multer');
const path = require('path');
const { auth, adminAuth, adminOnlyAuth } = require('../middleware/auth');
const { getProfile, getAllMembers, scanQRCode, updateMemberRole, deleteMember, updateProfile } = require('../controllers/memberController');

const router = express.Router();

// Multer configuration for profile photo upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);

    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Profile routes
router.get('/profile', auth, getProfile);
router.put('/profile', auth, upload.single('profilePhoto'), updateProfile);

// Admin routes
router.get('/all', auth, adminAuth, getAllMembers);
router.post('/scan', auth, adminAuth, scanQRCode);
router.put('/role/:id', auth, adminAuth, updateMemberRole);

// Delete route - ADMIN ONLY
router.delete('/:id', auth, adminOnlyAuth, deleteMember);

module.exports = router;

# ==== ./backend/services/emailService.js ====

const nodemailer = require('nodemailer');

// Configure email transporter
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST || 'smtp.gmail.com',
  port: process.env.EMAIL_PORT || 587,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Generate HTML membership card
const generateMembershipCardHTML = (userData) => {
  return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .card-container {
                max-width: 600px;
                margin: 0 auto;
                background-color: white;
                border-radius: 15px;
                overflow: hidden;
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }
            .header {
                background: linear-gradient(135deg, #1B2951 0%, #2D5016 100%);
                color: white;
                padding: 30px;
                text-align: center;
            }
            .logo-text {
                font-size: 28px;
                font-weight: bold;
                margin-bottom: 10px;
                letter-spacing: 2px;
            }
            .subtitle {
                font-size: 16px;
                opacity: 0.9;
                margin-bottom: 5px;
            }
            .card-type {
                font-size: 14px;
                opacity: 0.8;
                background-color: rgba(255,255,255,0.2);
                padding: 5px 15px;
                border-radius: 15px;
                display: inline-block;
                margin-top: 10px;
            }
            .member-info {
                padding: 30px;
                background-color: white;
            }
            .member-row {
                display: flex;
                margin-bottom: 15px;
                border-bottom: 1px solid #f0f0f0;
                padding-bottom: 10px;
            }
            .member-row:last-child {
                border-bottom: none;
                margin-bottom: 0;
            }
            .label {
                font-weight: bold;
                color: #1B2951;
                width: 140px;
                font-size: 14px;
            }
            .value {
                color: #333;
                flex: 1;
                font-size: 14px;
            }
            .membership-id {
                background-color: #E8F5E8;
                color: #2D5016;
                font-weight: bold;
                padding: 8px 15px;
                border-radius: 8px;
                font-family: monospace;
                letter-spacing: 1px;
            }
            .qr-section {
                text-align: center;
                padding: 20px;
                background-color: #f8f9fa;
                border-top: 2px solid #2D5016;
            }
            .qr-title {
                font-size: 16px;
                font-weight: bold;
                color: #1B2951;
                margin-bottom: 15px;
            }
            .qr-note {
                font-size: 12px;
                color: #666;
                margin-top: 15px;
                font-style: italic;
            }
            .footer {
                background-color: #1B2951;
                color: white;
                padding: 20px;
                text-align: center;
            }
            .footer-text {
                font-size: 14px;
                margin-bottom: 10px;
            }
            .contact-info {
                font-size: 12px;
                opacity: 0.8;
                line-height: 1.5;
            }
            .welcome-message {
                background-color: #E8F5E8;
                border-left: 4px solid #2D5016;
                padding: 20px;
                margin: 20px 0;
                font-size: 16px;
                line-height: 1.6;
                color: #2D5016;
            }
        </style>
    </head>
    <body>
        <div class="card-container">
            <!-- Header -->
            <div class="header">
                <div class="logo-text">GORKHA JANSHAKTI FRONT</div>
                <div class="subtitle">गोर्खा जनशक्ति फ्रन्ट</div>
                <div class="card-type">OFFICIAL MEMBERSHIP CARD</div>
            </div>

            <!-- Welcome Message -->
            <div class="welcome-message">
                <strong>Welcome to Gorkha Janshakti Front!</strong><br>
                We are honored to have you as a member of our movement. Your membership represents our collective strength in serving the Gorkha community.
            </div>

            <!-- Member Information -->
            <div class="member-info">
                <div class="member-row">
                    <div class="label">Full Name:</div>
                    <div class="value">${userData.fullName}</div>
                </div>
                <div class="member-row">
                    <div class="label">Father's Name:</div>
                    <div class="value">${userData.fatherName}</div>
                </div>
                <div class="member-row">
                    <div class="label">Membership ID:</div>
                    <div class="value">
                        <span class="membership-id">${userData.membershipId}</span>
                    </div>
                </div>
                <div class="member-row">
                    <div class="label">Phone:</div>
                    <div class="value">${userData.phone}</div>
                </div>
                <div class="member-row">
                    <div class="label">Email:</div>
                    <div class="value">${userData.email}</div>
                </div>
                <div class="member-row">
                    <div class="label">Constituency:</div>
                    <div class="value">${userData.constituency || 'Not specified'}</div>
                </div>
                <div class="member-row">
                    <div class="label">Member Since:</div>
                    <div class="value">${new Date().toLocaleDateString('en-IN')}</div>
                </div>
                <div class="member-row">
                    <div class="label">Status:</div>
                    <div class="value" style="color: #2D5016; font-weight: bold;">ACTIVE MEMBER</div>
                </div>
            </div>

            <!-- QR Code Section -->
            <div class="qr-section">
                <div class="qr-title">Verification QR Code</div>
                <div style="margin: 15px 0;">
                    <div style="background-color: white; padding: 10px; border-radius: 8px; display: inline-block;">
                        QR Code: ${userData.membershipId}
                    </div>
                </div>
                <div class="qr-note">
                    Use the mobile app to access your QR code for instant verification.
                </div>
            </div>

            <!-- Footer -->
            <div class="footer">
                <div class="footer-text">Thank you for joining our movement!</div>
                <div class="contact-info">
                    Party Headquarters<br>
                    Phone: +91-1234567890<br>
                    Email: contact@gorkhajanshakti.org
                </div>
            </div>
        </div>
    </body>
    </html>
  `;
};

// Send membership card email
const sendMembershipCard = async (userData) => {
  try {
    const membershipCardHTML = generateMembershipCardHTML(userData);

    const mailOptions = {
      from: {
        name: 'Gorkha Janshakti Front',
        address: process.env.EMAIL_USER
      },
      to: userData.email,
      subject: `Welcome to Gorkha Janshakti Front - Membership ID: ${userData.membershipId}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #1B2951;">Welcome to Gorkha Janshakti Front!</h1>
          
          <p>Dear <strong>${userData.fullName}</strong>,</p>
          
          <p>Congratulations! Your membership registration has been successfully completed.</p>
          
          <div style="background-color: #E8F5E8; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #2D5016; margin-top: 0;">Your Membership Details:</h3>
            <ul style="color: #2D5016;">
              <li><strong>Membership ID:</strong> ${userData.membershipId}</li>
              <li><strong>Registration Date:</strong> ${new Date().toLocaleDateString('en-IN')}</li>
              <li><strong>Status:</strong> Active Member</li>
            </ul>
          </div>

          <p>Your detailed membership card is below:</p>

          ${membershipCardHTML}

          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
            <p>Best regards,<br>
            <strong>Gorkha Janshakti Front</strong><br>
            Membership Committee</p>
          </div>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);
    console.log('Membership card email sent successfully to:', userData.email);
    return { success: true };
  } catch (error) {
    console.error('Error sending membership card email:', error);
    return { success: false, error: error.message };
  }
};

// Send role update email
const sendRoleUpdateEmail = async (userData, newRole) => {
  try {
    const roleNames = {
      member: 'Member',
      organizer: 'Organizer',
      admin: 'Administrator'
    };

    const mailOptions = {
      from: {
        name: 'Gorkha Janshakti Front',
        address: process.env.EMAIL_USER
      },
      to: userData.email,
      subject: `Role Updated - You are now an ${roleNames[newRole]}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1 style="color: #1B2951;">Role Update Notification</h1>
          
          <p>Dear <strong>${userData.name}</strong>,</p>
          
          <p>Your role in Gorkha Janshakti Front has been updated.</p>
          
          <div style="background-color: #E8F5E8; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
            <h2 style="color: #2D5016; margin-top: 0;">New Role: ${roleNames[newRole]}</h2>
          </div>

          <p>Please log into the mobile app to access your new features.</p>

          <p>Best regards,<br>
          <strong>Gorkha Janshakti Front</strong><br>
          Administration Team</p>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);
    console.log('Role update email sent successfully to:', userData.email);
    return { success: true };
  } catch (error) {
    console.error('Error sending role update email:', error);
    return { success: false, error: error.message };
  }
};

module.exports = {
  sendMembershipCard,
  sendRoleUpdateEmail,
};